/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.ehealth.ccd.smp;

import java.io.File;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author jgoncalves
 */
public class SignatureConfirmationDialog extends javax.swing.JDialog {
    
    /**
     * Creates new form SignatureConfirmationDialog
     */
    public SignatureConfirmationDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    /**
     * Custom constructor for the SignatureConfirmationDialog
     * @param parent Main SMP window JFrame
     * @param modal Modality of this dialog
     * @param smpOutputFolder Path to the folder containing the intermediary generated (unsigned) SMP files 
     */
    public SignatureConfirmationDialog(java.awt.Frame parent, boolean modal, File smpOutputFolder) {
        this(parent, modal);
        DefaultListModel smpListModel = new DefaultListModel();
        for (File smpFile : smpOutputFolder.listFiles()) {
            smpListModel.addElement(smpFile);
        }
        smpFilesList.setModel(smpListModel);
        this.userConfirm = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar2 = new javax.swing.JScrollBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        smpFilesList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        yesButton = new javax.swing.JButton();
        noButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        smpFileInfoTextArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Signature confirmation");
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setName("signatureConfirmationDialog"); // NOI18N

        smpFilesList.setCellRenderer(new FileListCellRenderer());
        smpFilesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                smpFilesListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(smpFilesList);

        jScrollPane1.setViewportView(jScrollPane2);

        jLabel1.setText("You are about to perform a qualified signature over the following information:");

        jLabel2.setText("Are you sure you want to proceed?");

        yesButton.setText("Yes");
        yesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesButtonActionPerformed(evt);
            }
        });

        noButton.setText("No");
        noButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noButtonActionPerformed(evt);
            }
        });

        smpFileInfoTextArea.setEditable(false);
        smpFileInfoTextArea.setColumns(20);
        smpFileInfoTextArea.setRows(5);
        jScrollPane4.setViewportView(smpFileInfoTextArea);

        jLabel3.setText("SMP file information");

        jLabel4.setText("SMP files");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(yesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(noButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 172, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(0, 136, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(yesButton)
                    .addComponent(noButton))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void yesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesButtonActionPerformed
        // TODO add your handling code here:
        userConfirm = true;
        this.dispose();
    }//GEN-LAST:event_yesButtonActionPerformed

    private void noButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noButtonActionPerformed
        // TODO add your handling code here:
        userConfirm = false;
        this.dispose();
    }//GEN-LAST:event_noButtonActionPerformed

    private void smpFilesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_smpFilesListValueChanged
        try {
            // TODO add your handling code here:
            int smpFileIndex = smpFilesList.getSelectedIndex();
            ListModel smpListModel = smpFilesList.getModel();
            File smpFile = (File)smpListModel.getElementAt(smpFileIndex);
            /* Print full content of file to text area */
            /* byte[] encoded = Files.readAllBytes(Paths.get(smpFile.getAbsolutePath()));
            smpFileInfoTextArea.setText(new String(encoded, StandardCharsets.UTF_8)); */
            StringBuilder textAreaContent = new StringBuilder();
            Map<String, String> smpFileMapInfo = getSmpMapInfo(smpFile);
            for (String key : smpFileMapInfo.keySet()) {
                textAreaContent.append(key).append(": ").append(smpFileMapInfo.get(key)).append("\n");
            }
            smpFileInfoTextArea.setText(textAreaContent.toString());
        } catch (IOException ex) {
            Logger.getLogger(SignatureConfirmationDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(SignatureConfirmationDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(SignatureConfirmationDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(SignatureConfirmationDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_smpFilesListValueChanged

    /** 
     * Creates a helper map that maps SMP XML tag elements to their namespaces 
     * and uses it to fill a second Map<SMPKey,SMPValue>
     * @param smpFile SMP file to be parsed
     * @return Map<SMPKey,SMPValue>
     * @throws ParserConfigurationException
     * @throws SAXException
     * @throws IOException
     * @throws TransformerException 
     */
    private Map<String,String> getSmpMapInfo(File smpFile) throws ParserConfigurationException, SAXException, IOException, TransformerException {
        final String busdoxServiceMetadataNamespace = "http://busdox.org/serviceMetadata/publishing/1.0/";
        final String identifiersNamespace = "http://busdox.org/transport/identifiers/1.0/";
        final String addressingNamespace = "http://www.w3.org/2005/08/addressing";
        // Maps keys to namespaces
        // LinkedHashMap: to keep the insert order of the values
        final Map<String,String> keysMap = new LinkedHashMap<String,String>(); 
        keysMap.put("ParticipantIdentifier", identifiersNamespace);
        keysMap.put("DocumentIdentifier", identifiersNamespace);
        keysMap.put("ProcessIdentifier", identifiersNamespace);
        keysMap.put("Address", addressingNamespace);
        keysMap.put("RequireBusinessLevelSignature", busdoxServiceMetadataNamespace);
        keysMap.put("MinimumAuthenticationLevel", busdoxServiceMetadataNamespace);
        keysMap.put("ServiceActivationDate", busdoxServiceMetadataNamespace);
        keysMap.put("ServiceExpirationDate", busdoxServiceMetadataNamespace);
        keysMap.put("Certificate", busdoxServiceMetadataNamespace);
        keysMap.put("ServiceDescription", busdoxServiceMetadataNamespace);
        keysMap.put("TechnicalContactUrl", busdoxServiceMetadataNamespace);
        keysMap.put("TechnicalInformationUrl", busdoxServiceMetadataNamespace);
        keysMap.put("Extension", busdoxServiceMetadataNamespace);
        
        // LinkedHashMap: to keep the insert order of the values
        Map<String, String> smpFileInfo = new LinkedHashMap<String, String>();
        for (String key : keysMap.keySet()) {
            String value = getSmpFileValue(smpFile, key, keysMap.get(key));
            smpFileInfo.put(key, value == null ? "<none>" : value);
        }
        return smpFileInfo;
    }
    
    /**
     * Gets the XML tag value of a key (tag) in a certain file.
     * @param smpFile The SMP file to parse.
     * @param smpKey The name of the XML tag to search for.
     * @param namespace The namespace of the smpKey.
     * @return Returns value of SMP element. E.g., "ParticipantIdentifier" -> "urn:ehealth:pt:ncpb-idp"
     * @throws ParserConfigurationException
     * @throws SAXException
     * @throws IOException
     * @throws TransformerException 
     */
    private String getSmpFileValue(File smpFile, String smpKey, String namespace) throws ParserConfigurationException, SAXException, IOException, TransformerException {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(smpFile);
        Element rootElement = document.getDocumentElement();
        String smpValue = getXmlTagValue(smpKey, namespace, rootElement);
        return smpValue;
    }
    
    /**
     * Gets the value of a XML tag.
     * @param tagName Name of the XML tag
     * @param namespace The namespace of the XML tag
     * @param element The root element of the XML
     * @return Returns value of XML element
     * @throws TransformerException 
     */
    private String getXmlTagValue(String tagName, String namespace, Element element) throws TransformerException {
        NodeList list = element.getElementsByTagNameNS(namespace, tagName);
        if (list != null && list.getLength() > 0) {
            NodeList subList = list.item(0).getChildNodes();
            if (subList != null && subList.getLength() > 0) {
                if (subList.getLength() > 1) {
                    /* for the specific case of an Element having some Elements
                    under it, as is the case of the search mask: <Extension> has
                    another XML under it
                    */
                    for (int i=0; i<subList.getLength(); i++) {
                        Node node = subList.item(i);
                        if (node instanceof Element) {
                            Element elem = (Element)node;
                            return GenericUtils.convertElementToString(elem);
                        }
                    }
                } else {
                    /* for the cases where the node just contains the text value */
                    return subList.item(0).getNodeValue();    
                }
            }
        }

        return null;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SignatureConfirmationDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SignatureConfirmationDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SignatureConfirmationDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SignatureConfirmationDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SignatureConfirmationDialog dialog = new SignatureConfirmationDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private boolean userConfirm;

    public boolean isUserConfirm() {
        return userConfirm;
    }

    public void setUserConfirm(boolean userConfirm) {
        this.userConfirm = userConfirm;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollBar jScrollBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton noButton;
    private javax.swing.JTextArea smpFileInfoTextArea;
    private javax.swing.JList smpFilesList;
    private javax.swing.JButton yesButton;
    // End of variables declaration//GEN-END:variables
}
