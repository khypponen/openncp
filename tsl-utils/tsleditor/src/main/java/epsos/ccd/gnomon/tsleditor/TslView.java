/***Licensed to the Apache Software Foundation (ASF) under one
*or more contributor license agreements.  See the NOTICE file
*distributed with this work for additional information
*regarding copyright ownership.  The ASF licenses this file
*to you under the Apache License, Version 2.0 (the
*"License"); you may not use this file except in compliance
*with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*Unless required by applicable law or agreed to in writing,
*software distributed under the License is distributed on an
*"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*KIND, either express or implied.  See the License for the
*specific language governing permissions and limitations
*under the License.
**/
/**
	* TslView.java
	*/
package epsos.ccd.gnomon.tsleditor;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.math.BigInteger;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.Vector;

import javax.swing.AbstractAction;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.Timer;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import javax.xml.bind.JAXBElement;
import javax.xml.datatype.DatatypeFactory;

import org.etsi.uri._02231.v2.DigitalIdentityListType;
import org.etsi.uri._02231.v2.DigitalIdentityType;
import org.etsi.uri._02231.v2.ElectronicAddressType;
import org.etsi.uri._02231.v2.InternationalNamesType;
import org.etsi.uri._02231.v2.MultiLangNormStringType;
import org.etsi.uri._02231.v2.NonEmptyMultiLangURIListType;
import org.etsi.uri._02231.v2.NonEmptyMultiLangURIType;
import org.etsi.uri._02231.v2.NonEmptyURIListType;
import org.etsi.uri._02231.v2.ObjectFactory;
import org.etsi.uri._02231.v2.PolicyOrLegalnoticeType;
import org.etsi.uri._02231.v2.PostalAddressType;
import org.etsi.uri._02231.v2.ServiceSupplyPointsType;
import org.etsi.uri._02231.v2.TSLSchemeInformationType;
import org.etsi.uri._02231.v2.TSPServiceInformationType;
import org.etsi.uri._02231.v2.TSPServiceType;
import org.etsi.uri._02231.v2.TrustStatusListType;
import org.jdesktop.application.Action;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.TaskMonitor;
import org.joda.time.DateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3._2000._09.xmldsig.CanonicalizationMethodType;
import org.w3._2000._09.xmldsig.KeyInfoType;
import org.w3._2000._09.xmldsig.SignatureMethodType;
import org.w3._2000._09.xmldsig.SignatureType;
import org.w3._2000._09.xmldsig.SignedInfoType;
import org.w3._2000._09.xmldsig.X509DataType;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;

import epsos.ccd.gnomon.tsleditor.model.TrustService;
import epsos.ccd.gnomon.tsleditor.model.TrustServiceList;
import epsos.ccd.gnomon.tsleditor.model.TrustServiceListFactory;
import epsos.ccd.gnomon.tsleditor.model.TrustServiceListUtils;
import epsos.ccd.gnomon.tsleditor.model.TrustServiceProvider;
import epsos.ccd.gnomon.tsleditor.model.Tsl2PdfExporter;
import eu.ehealth.ccd.smp.TransformatorUI;

/**
 * The application's main frame. The skeleton of this class was generated by Net
 * Beans.
 *
 * @author bouzianis
 */
public class TslView extends FrameView implements TreeSelectionListener, ItemListener, MouseListener {

	Logger LOGGER = LoggerFactory.getLogger(TslView.class);

	public TslView(SingleFrameApplication app) {
		super(app);

		try {
			this.certificateFactory = CertificateFactory.getInstance("X.509");
		} catch (Exception e1) {
		}

		initComponents();

		initCombos();
		TSLEnvelopePanel.setVisible(false);
		TSLProviderPanel.setVisible(false);
		TSLServicePanel.setVisible(false);
		TSLSignaturePanel.setVisible(false);
		jTree.setVisible(false);
		jTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		jTree.addTreeSelectionListener(this);
		jTree.addMouseListener(this);
		jTree.setShowsRootHandles(true);
		jTree.setToolTipText("Click on a node to edit its information");
		this.jMenuItem2.setEnabled(false);
		this.jMenuItem3.setEnabled(false);
		this.jMenuItem4.setEnabled(false);

		jFileChooser1.setFileFilter(new FileNameExtensionFilter("TSL Files (*.xml)", "xml"));
		certificateFileChooser.setFileFilter(new FileNameExtensionFilter("Certificate Files (*.crt)", "crt"));
		this.signatureFileChooser.setFileFilter(new FileNameExtensionFilter("Java Keystore Files (*.jks)", "jks"));
		certificateList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

		// status bar initialization - message timeout, idle icon and busy
		// animation, etc
		ResourceMap resourceMap = getResourceMap();
		int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
		messageTimer = new Timer(messageTimeout, new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				statusMessageLabel.setText("");
			}
		});
		messageTimer.setRepeats(false);
		int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
		for (int i = 0; i < busyIcons.length; i++) {
			busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
		}
		busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
				statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
			}
		});
		idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
		statusAnimationLabel.setIcon(idleIcon);
		progressBar.setVisible(false);

		// connecting action tasks to status bar via TaskMonitor
		TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
		taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
			public void propertyChange(java.beans.PropertyChangeEvent evt) {
				String propertyName = evt.getPropertyName();
				if ("started".equals(propertyName)) {
					if (!busyIconTimer.isRunning()) {
						statusAnimationLabel.setIcon(busyIcons[0]);
						busyIconIndex = 0;
						busyIconTimer.start();
					}
					progressBar.setVisible(true);
					progressBar.setIndeterminate(true);
				} else if ("done".equals(propertyName)) {
					busyIconTimer.stop();
					statusAnimationLabel.setIcon(idleIcon);
					progressBar.setVisible(false);
					progressBar.setValue(0);
				} else if ("message".equals(propertyName)) {
					String text = (String) (evt.getNewValue());
					statusMessageLabel.setText((text == null) ? "" : text);
					messageTimer.restart();
				} else if ("progress".equals(propertyName)) {
					int value = (Integer) (evt.getNewValue());
					progressBar.setVisible(true);
					progressBar.setIndeterminate(false);
					progressBar.setValue(value);
				}
			}
		});
	}

	@Action
	/**
	 * This action is called when the "About" link in the menu bar is chosen by
	 * the user
	 */
	public void showAboutBox() {
		if (aboutBox == null) {
			JFrame mainFrame = TslEditor.getApplication().getMainFrame();
			aboutBox = new TslAboutBox(mainFrame);
			aboutBox.setLocationRelativeTo(mainFrame);
		}
		TslEditor.getApplication().show(aboutBox);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		mainPanel = new javax.swing.JPanel();
		jSplitPane1 = new javax.swing.JSplitPane();
		treeScrollPane = new javax.swing.JScrollPane();
		jTree = new javax.swing.JTree();
		rightScrollPane = new javax.swing.JScrollPane();
		TSLEnvelopePanel = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		textField_ID = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		textField_SequenceNumber = new javax.swing.JTextField();
		language_OperatorName = new javax.swing.JComboBox();
		jLabel4 = new javax.swing.JLabel();
		textField_SchemeName = new javax.swing.JTextField();
		language_SchemeName = new javax.swing.JComboBox();
		jLabel5 = new javax.swing.JLabel();
		language_OperatorAddress = new javax.swing.JComboBox();
		comboBox_territory = new javax.swing.JComboBox();
		textField_listIssueDateTime = new javax.swing.JFormattedTextField();
		jLabel6 = new javax.swing.JLabel();
		textField_streetAddress = new javax.swing.JTextField();
		jLabel7 = new javax.swing.JLabel();
		textField_locality = new javax.swing.JTextField();
		jLabel8 = new javax.swing.JLabel();
		textField_postCode = new javax.swing.JTextField();
		jLabel9 = new javax.swing.JLabel();
		textField_countryName = new javax.swing.JTextField();
		jLabel10 = new javax.swing.JLabel();
		textField_electronicAddress1 = new javax.swing.JTextField();
		jLabel11 = new javax.swing.JLabel();
		textField_electronicAddress2 = new javax.swing.JTextField();
		jLabel12 = new javax.swing.JLabel();
		textField_electronicAddress3 = new javax.swing.JTextField();
		jLabel13 = new javax.swing.JLabel();
		jLabel14 = new javax.swing.JLabel();
		jLabel15 = new javax.swing.JLabel();
		textField_OperatorName = new javax.swing.JTextField();
		jSeparator3 = new javax.swing.JSeparator();
		jSeparator4 = new javax.swing.JSeparator();
		jLabel3 = new javax.swing.JLabel();
		textField_nextUpdate = new javax.swing.JFormattedTextField();
		jLabel16 = new javax.swing.JLabel();
		textField_DistributionPoint = new javax.swing.JTextField();
		menuBar = new javax.swing.JMenuBar();
		javax.swing.JMenu fileMenu = new javax.swing.JMenu();
		jMenuItem1 = new javax.swing.JMenuItem();
		jMenuItem5 = new javax.swing.JMenuItem();
		jSeparator1 = new javax.swing.JPopupMenu.Separator();
		jMenuItem2 = new javax.swing.JMenuItem();
		jMenuItem4 = new javax.swing.JMenuItem();
		jMenuItem3 = new javax.swing.JMenuItem();
		jSeparator2 = new javax.swing.JPopupMenu.Separator();
		javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
		javax.swing.JMenu helpMenu = new javax.swing.JMenu();
		javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
		statusPanel = new javax.swing.JPanel();
		javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
		statusMessageLabel = new javax.swing.JLabel();
		statusAnimationLabel = new javax.swing.JLabel();
		progressBar = new javax.swing.JProgressBar();
		fileChooser = new javax.swing.JDialog();
		jFileChooser1 = new javax.swing.JFileChooser();
		TSLProviderPanel = new javax.swing.JPanel();
		jLabel17 = new javax.swing.JLabel();
		textField_providerName = new javax.swing.JTextField();
		jLabel20 = new javax.swing.JLabel();
		textField_Provider_StreetAddress = new javax.swing.JTextField();
		jLabel21 = new javax.swing.JLabel();
		jLabel22 = new javax.swing.JLabel();
		textField_Provider_Locality = new javax.swing.JTextField();
		textField_Provider_PostCode = new javax.swing.JTextField();
		jLabel23 = new javax.swing.JLabel();
		jLabel24 = new javax.swing.JLabel();
		textField_Provider_CountryName = new javax.swing.JTextField();
		language_Provider_Name = new javax.swing.JComboBox();
		textField_Provider_ElectronicAddress3 = new javax.swing.JTextField();
		jLabel25 = new javax.swing.JLabel();
		textField_Provider_ElectronicAddress1 = new javax.swing.JTextField();
		jLabel26 = new javax.swing.JLabel();
		jLabel27 = new javax.swing.JLabel();
		textField_Provider_ElectronicAddress2 = new javax.swing.JTextField();
		jSeparator6 = new javax.swing.JSeparator();
		jLabel28 = new javax.swing.JLabel();
		textField_Provider_Information = new javax.swing.JTextField();
		language_Provider_Information = new javax.swing.JComboBox();
		language_Provider_Address = new javax.swing.JComboBox();
		jSeparator5 = new javax.swing.JSeparator();
		TSLServicePanel = new javax.swing.JPanel();
		jLabel18 = new javax.swing.JLabel();
		combo_ServiceTypeIdentifier = new javax.swing.JComboBox();
		jLabel29 = new javax.swing.JLabel();
		textField_Service_Name = new javax.swing.JTextField();
		language_Service_Name = new javax.swing.JComboBox();
		jLabel30 = new javax.swing.JLabel();
		addCertificateButton = new javax.swing.JButton();
		jLabel31 = new javax.swing.JLabel();
		combo_Service_Status = new javax.swing.JComboBox();
		jLabel32 = new javax.swing.JLabel();
		textField_Service_StartingTime = new javax.swing.JFormattedTextField();
		jLabel33 = new javax.swing.JLabel();
		textField_Service_SupplyPoint1 = new javax.swing.JTextField();
		jLabel34 = new javax.swing.JLabel();
		textField_Service_SupplyPoint2 = new javax.swing.JTextField();
		jLabel35 = new javax.swing.JLabel();
		textField_Service_SupplyPoint3 = new javax.swing.JTextField();
		jScrollPane2 = new javax.swing.JScrollPane();
		certificateList = new javax.swing.JList();
		viewCertificateButton = new javax.swing.JButton();
		deleteCertificateButton = new javax.swing.JButton();
		TSLSignaturePanel = new javax.swing.JPanel();
		jLabel19 = new javax.swing.JLabel();
		jLabel42 = new javax.swing.JLabel();
		jLabel43 = new javax.swing.JLabel();
		textField_Signature_CanonicalizationMethod = new javax.swing.JTextField();
		textField_Signature_SignatureMethod = new javax.swing.JTextField();
		signButton = new javax.swing.JButton();
		jLabel44 = new javax.swing.JLabel();
		signatureIssuerName = new javax.swing.JTextField();
		jLabel45 = new javax.swing.JLabel();
		signatureSerialNumber = new javax.swing.JTextField();
		jLabel46 = new javax.swing.JLabel();
		signatureValidFrom = new javax.swing.JTextField();
		jLabel47 = new javax.swing.JLabel();
		signatureValidUntil = new javax.swing.JTextField();
		jLabel48 = new javax.swing.JLabel();
		signatureSubjectName = new javax.swing.JTextField();
		digitalIdDialog = new javax.swing.JDialog();
		jLabel37 = new javax.swing.JLabel();
		jButton2 = new javax.swing.JButton();
		jLabel36 = new javax.swing.JLabel();
		jLabel38 = new javax.swing.JLabel();
		jLabel39 = new javax.swing.JLabel();
		jLabel40 = new javax.swing.JLabel();
		jLabel41 = new javax.swing.JLabel();
		certificateIssuerName = new javax.swing.JTextField();
		certificateSerialNumber = new javax.swing.JTextField();
		certificateValidFrom = new javax.swing.JTextField();
		certificateValidUntil = new javax.swing.JTextField();
		certificateSubjectName = new javax.swing.JTextField();
		certificateFileDialog = new javax.swing.JDialog();
		certificateFileChooser = new javax.swing.JFileChooser();
		signatureFileDialog = new javax.swing.JDialog();
		jPanel1 = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		jLabel50 = new javax.swing.JLabel();
		jLabel51 = new javax.swing.JLabel();
		keyStorePassword = new javax.swing.JPasswordField();
		keyPassword = new javax.swing.JPasswordField();
		jLabel49 = new javax.swing.JLabel();
		keyAlias = new javax.swing.JPasswordField();
		jPanel3 = new javax.swing.JPanel();
		signatureFileChooser = new javax.swing.JFileChooser();
		jLabel52 = new javax.swing.JLabel();
		jLabel53 = new javax.swing.JLabel();
		treePopupMenu = new javax.swing.JPopupMenu();
		ftpDialog = new javax.swing.JDialog();
		jLabel54 = new javax.swing.JLabel();
		jLabel55 = new javax.swing.JLabel();
		ftpServerField = new javax.swing.JTextField();
		// ftpUploadPathField = new javax.swing.JTextField();
		ftpUploadPathField = new javax.swing.JComboBox<>();
		ftpUserName = new javax.swing.JTextField();
		jLabel56 = new javax.swing.JLabel();
		jLabel57 = new javax.swing.JLabel();
		jButton1 = new javax.swing.JButton();
		jLabel58 = new javax.swing.JLabel();
		ftpPrivateKey = new javax.swing.JTextField();

		mainPanel.setName("mainPanel"); // NOI18N

		jSplitPane1.setName("jSplitPane1"); // NOI18N

		treeScrollPane.setMinimumSize(new java.awt.Dimension(102, 322));
		treeScrollPane.setName("treeScrollPane"); // NOI18N
		treeScrollPane.setPreferredSize(new java.awt.Dimension(200, 322));

		jTree.setMaximumSize(new java.awt.Dimension(400, 400));
		jTree.setMinimumSize(new java.awt.Dimension(100, 64));
		jTree.setName("jTree"); // NOI18N
		jTree.setPreferredSize(new java.awt.Dimension(200, 64));
		treeScrollPane.setViewportView(jTree);

		jSplitPane1.setLeftComponent(treeScrollPane);

		rightScrollPane.setName("rightScrollPane"); // NOI18N
		rightScrollPane.setPreferredSize(new java.awt.Dimension(600, 622));

		TSLEnvelopePanel.setName("TSLEnvelopePanel"); // NOI18N

		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application
				.getInstance(epsos.ccd.gnomon.tsleditor.TslEditor.class).getContext().getResourceMap(TslView.class);
		jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
		jLabel1.setName("jLabel1"); // NOI18N

		textField_ID.setText(resourceMap.getString("textField_ID.text")); // NOI18N
		textField_ID.setName("textField_ID"); // NOI18N

		jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
		jLabel2.setName("jLabel2"); // NOI18N

		textField_SequenceNumber.setText(resourceMap.getString("textField_SequenceNumber.text")); // NOI18N
		textField_SequenceNumber.setName("textField_SequenceNumber"); // NOI18N

		language_OperatorName.setModel(
				new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		language_OperatorName.setName("language_OperatorName"); // NOI18N

		jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
		jLabel4.setName("jLabel4"); // NOI18N

		textField_SchemeName.setText(resourceMap.getString("textField_SchemeName.text")); // NOI18N
		textField_SchemeName.setName("textField_SchemeName"); // NOI18N

		language_SchemeName.setModel(
				new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		language_SchemeName.setName("language_SchemeName"); // NOI18N

		jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
		jLabel5.setName("jLabel5"); // NOI18N

		language_OperatorAddress.setModel(
				new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		language_OperatorAddress.setName("language_OperatorAddress"); // NOI18N

		comboBox_territory.setModel(
				new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		comboBox_territory.setName("comboBox_territory"); // NOI18N

		textField_listIssueDateTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
				new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy/MM/dd HH:mm:ss"))));
		textField_listIssueDateTime.setToolTipText(resourceMap.getString("textField_listIssueDateTime.toolTipText")); // NOI18N
		textField_listIssueDateTime.setName("textField_listIssueDateTime"); // NOI18N

		jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
		jLabel6.setName("jLabel6"); // NOI18N

		textField_streetAddress.setText(resourceMap.getString("textField_streetAddress.text")); // NOI18N
		textField_streetAddress.setName("textField_streetAddress"); // NOI18N

		jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
		jLabel7.setName("jLabel7"); // NOI18N

		textField_locality.setText(resourceMap.getString("textField_locality.text")); // NOI18N
		textField_locality.setName("textField_locality"); // NOI18N

		jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
		jLabel8.setName("jLabel8"); // NOI18N

		textField_postCode.setText(resourceMap.getString("textField_postCode.text")); // NOI18N
		textField_postCode.setName("textField_postCode"); // NOI18N

		jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
		jLabel9.setName("jLabel9"); // NOI18N

		textField_countryName.setText(resourceMap.getString("textField_countryName.text")); // NOI18N
		textField_countryName.setName("textField_countryName"); // NOI18N

		jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
		jLabel10.setName("jLabel10"); // NOI18N

		textField_electronicAddress1.setText(resourceMap.getString("textField_electronicAddress1.text")); // NOI18N
		textField_electronicAddress1.setName("textField_electronicAddress1"); // NOI18N

		jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
		jLabel11.setName("jLabel11"); // NOI18N

		textField_electronicAddress2.setText(resourceMap.getString("textField_electronicAddress2.text")); // NOI18N
		textField_electronicAddress2.setName("textField_electronicAddress2"); // NOI18N

		jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
		jLabel12.setName("jLabel12"); // NOI18N

		textField_electronicAddress3.setText(resourceMap.getString("textField_electronicAddress3.text")); // NOI18N
		textField_electronicAddress3.setName("textField_electronicAddress3"); // NOI18N

		jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
		jLabel13.setName("jLabel13"); // NOI18N

		jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
		jLabel14.setName("jLabel14"); // NOI18N

		jLabel15.setText(resourceMap.getString("jLabel15.text")); // NOI18N
		jLabel15.setName("jLabel15"); // NOI18N

		textField_OperatorName.setText(resourceMap.getString("textField_OperatorName.text")); // NOI18N
		textField_OperatorName.setName("textField_OperatorName"); // NOI18N

		jSeparator3.setName("jSeparator3"); // NOI18N

		jSeparator4.setName("jSeparator4"); // NOI18N

		jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
		jLabel3.setName("jLabel3"); // NOI18N

		textField_nextUpdate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
				new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy/MM/dd HH:mm:ss"))));
		textField_nextUpdate.setToolTipText(resourceMap.getString("textField_nextUpdate.toolTipText")); // NOI18N
		textField_nextUpdate.setName("textField_nextUpdate"); // NOI18N

		jLabel16.setText(resourceMap.getString("jLabel16.text")); // NOI18N
		jLabel16.setName("jLabel16"); // NOI18N

		textField_DistributionPoint.setText(resourceMap.getString("textField_DistributionPoint.text")); // NOI18N
		textField_DistributionPoint.setName("textField_DistributionPoint"); // NOI18N

		javax.swing.GroupLayout TSLEnvelopePanelLayout = new javax.swing.GroupLayout(TSLEnvelopePanel);
		TSLEnvelopePanel.setLayout(TSLEnvelopePanelLayout);
		TSLEnvelopePanelLayout.setHorizontalGroup(TSLEnvelopePanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(TSLEnvelopePanelLayout.createSequentialGroup().addContainerGap()
						.addGroup(TSLEnvelopePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 730,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGroup(javax.swing.GroupLayout.Alignment.LEADING, TSLEnvelopePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
										.addComponent(jSeparator4)
										.addGroup(javax.swing.GroupLayout.Alignment.LEADING, TSLEnvelopePanelLayout
												.createSequentialGroup().addGap(24, 24, 24)
												.addGroup(TSLEnvelopePanelLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(TSLEnvelopePanelLayout
																.createSequentialGroup().addGap(24, 24, 24)
																.addGroup(TSLEnvelopePanelLayout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																		.addGroup(TSLEnvelopePanelLayout
																				.createSequentialGroup().addGap(8, 8, 8)
																				.addGroup(TSLEnvelopePanelLayout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.TRAILING)
																						.addComponent(jLabel1)
																						.addComponent(jLabel2,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								107,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(jLabel4)))
																		.addComponent(jLabel5).addComponent(jLabel15))
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addGroup(TSLEnvelopePanelLayout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.TRAILING,
																				false)
																		.addComponent(textField_OperatorName)
																		.addComponent(textField_ID,
																				javax.swing.GroupLayout.Alignment.LEADING)
																		.addComponent(textField_SequenceNumber,
																				javax.swing.GroupLayout.Alignment.LEADING)
																		.addComponent(textField_SchemeName,
																				javax.swing.GroupLayout.Alignment.LEADING,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				486,
																				javax.swing.GroupLayout.PREFERRED_SIZE))
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addGroup(TSLEnvelopePanelLayout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																		.addComponent(language_OperatorAddress,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addComponent(language_OperatorName,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addComponent(language_SchemeName,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.PREFERRED_SIZE)))
														.addGroup(TSLEnvelopePanelLayout
																.createSequentialGroup().addGap(72, 72, 72)
																.addGroup(TSLEnvelopePanelLayout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.TRAILING)
																		.addComponent(jLabel9).addComponent(jLabel6)
																		.addComponent(jLabel7).addComponent(jLabel8))
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addGroup(TSLEnvelopePanelLayout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING,
																				false)
																		.addComponent(textField_countryName)
																		.addComponent(textField_postCode)
																		.addComponent(textField_locality)
																		.addComponent(textField_streetAddress,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				464,
																				javax.swing.GroupLayout.PREFERRED_SIZE)))
														.addGroup(TSLEnvelopePanelLayout.createSequentialGroup()
																.addGap(47, 47, 47).addGroup(TSLEnvelopePanelLayout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.TRAILING,
																				false)
																		.addGroup(
																				javax.swing.GroupLayout.Alignment.LEADING,
																				TSLEnvelopePanelLayout
																						.createSequentialGroup()
																						.addComponent(jLabel10)
																						.addPreferredGap(
																								javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																						.addComponent(
																								textField_electronicAddress1,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								492,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addGroup(
																				javax.swing.GroupLayout.Alignment.LEADING,
																				TSLEnvelopePanelLayout
																						.createSequentialGroup()
																						.addGroup(TSLEnvelopePanelLayout
																								.createParallelGroup(
																										javax.swing.GroupLayout.Alignment.TRAILING)
																								.addComponent(jLabel14)
																								.addComponent(jLabel13)
																								.addComponent(jLabel12)
																								.addComponent(jLabel3)
																								.addComponent(jLabel16))
																						.addPreferredGap(
																								javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																						.addGroup(TSLEnvelopePanelLayout
																								.createParallelGroup(
																										javax.swing.GroupLayout.Alignment.LEADING)
																								.addComponent(
																										textField_DistributionPoint,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										492,
																										Short.MAX_VALUE)
																								.addComponent(
																										comboBox_territory,
																										javax.swing.GroupLayout.PREFERRED_SIZE,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										javax.swing.GroupLayout.PREFERRED_SIZE)
																								.addComponent(
																										textField_electronicAddress3,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										492,
																										Short.MAX_VALUE)
																								.addGroup(
																										TSLEnvelopePanelLayout
																												.createParallelGroup(
																														javax.swing.GroupLayout.Alignment.TRAILING,
																														false)
																												.addComponent(
																														textField_nextUpdate,
																														javax.swing.GroupLayout.Alignment.LEADING)
																												.addComponent(
																														textField_listIssueDateTime,
																														javax.swing.GroupLayout.Alignment.LEADING,
																														javax.swing.GroupLayout.DEFAULT_SIZE,
																														116,
																														Short.MAX_VALUE))))
																		.addGroup(TSLEnvelopePanelLayout
																				.createSequentialGroup()
																				.addComponent(jLabel11)
																				.addPreferredGap(
																						javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																				.addComponent(
																						textField_electronicAddress2))))))))
						.addContainerGap(39, Short.MAX_VALUE)));
		TSLEnvelopePanelLayout
				.setVerticalGroup(TSLEnvelopePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(TSLEnvelopePanelLayout
								.createSequentialGroup().addGap(28, 28, 28).addGroup(TSLEnvelopePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addGroup(TSLEnvelopePanelLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(textField_SequenceNumber,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(jLabel2))
										.addGroup(
												TSLEnvelopePanelLayout.createSequentialGroup()
														.addGroup(TSLEnvelopePanelLayout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.BASELINE)
																.addComponent(jLabel1).addComponent(textField_ID,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
														.addGap(38, 38, 38)))
								.addGap(18, 18, 18)
								.addGroup(TSLEnvelopePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(textField_SchemeName, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jLabel4).addComponent(language_SchemeName,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGap(20, 20, 20)
								.addGroup(TSLEnvelopePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabel15)
										.addComponent(textField_OperatorName, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(language_OperatorName, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGap(22, 22, 22)
								.addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(TSLEnvelopePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabel5).addComponent(language_OperatorAddress,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(TSLEnvelopePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addGroup(TSLEnvelopePanelLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel9).addComponent(textField_countryName,
														javax.swing.GroupLayout.PREFERRED_SIZE, 20,
														javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGroup(TSLEnvelopePanelLayout.createSequentialGroup()
												.addGroup(TSLEnvelopePanelLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(textField_streetAddress,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(jLabel6))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addGroup(TSLEnvelopePanelLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(textField_locality,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(jLabel7))
												.addGap(14, 14, 14)
												.addGroup(
														TSLEnvelopePanelLayout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.BASELINE)
																.addComponent(jLabel8).addComponent(textField_postCode,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
												.addGap(29, 29, 29)))
								.addGap(21, 21, 21)
								.addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(TSLEnvelopePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabel10).addComponent(textField_electronicAddress1,
												javax.swing.GroupLayout.PREFERRED_SIZE, 20,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(TSLEnvelopePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabel11).addComponent(textField_electronicAddress2,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(TSLEnvelopePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(textField_electronicAddress3,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jLabel12))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(TSLEnvelopePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(comboBox_territory, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jLabel13))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(TSLEnvelopePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(textField_listIssueDateTime,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 22,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(TSLEnvelopePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jLabel3).addComponent(textField_nextUpdate,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(TSLEnvelopePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jLabel16).addComponent(textField_DistributionPoint,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addContainerGap(68, Short.MAX_VALUE)));

		rightScrollPane.setViewportView(TSLEnvelopePanel);

		jSplitPane1.setRightComponent(rightScrollPane);

		javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
		mainPanel.setLayout(mainPanelLayout);
		mainPanelLayout.setHorizontalGroup(
				mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane1,
						javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 845,
						Short.MAX_VALUE));
		mainPanelLayout.setVerticalGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING,
						javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE));

		menuBar.setName("menuBar"); // NOI18N

		fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
		fileMenu.setName("fileMenu"); // NOI18N

		javax.swing.ActionMap actionMap = org.jdesktop.application.Application
				.getInstance(epsos.ccd.gnomon.tsleditor.TslEditor.class).getContext().getActionMap(TslView.class, this);
		jMenuItem1.setAction(actionMap.get("newTSL")); // NOI18N
		jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
		jMenuItem1.setName("jMenuItem1"); // NOI18N
		fileMenu.add(jMenuItem1);

		jMenuItem5.setAction(actionMap.get("openTSL")); // NOI18N
		jMenuItem5.setText(resourceMap.getString("jMenuItem5.text")); // NOI18N
		jMenuItem5.setName("jMenuItem5"); // NOI18N
		fileMenu.add(jMenuItem5);

		jSeparator1.setName("jSeparator1"); // NOI18N
		fileMenu.add(jSeparator1);

		jMenuItem2.setAction(actionMap.get("saveTSL")); // NOI18N
		jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
		jMenuItem2.setName("jMenuItem2"); // NOI18N
		fileMenu.add(jMenuItem2);

		jMenuItem4.setAction(actionMap.get("previewTSL")); // NOI18N
		jMenuItem4.setText(resourceMap.getString("jMenuItem4.text")); // NOI18N
		jMenuItem4.setName("jMenuItem4"); // NOI18N
		fileMenu.add(jMenuItem4);

		jMenuItem3.setAction(actionMap.get("UploadTSLSftp")); // NOI18N
		jMenuItem3.setText(resourceMap.getString("jMenuItem3.text")); // NOI18N
		jMenuItem3.setName("jMenuItem3"); // NOI18N
		fileMenu.add(jMenuItem3);

		smpMenuItem = new JMenuItem("SMP");
		smpMenuItem.setAction(actionMap.get("openSMP"));
		smpMenuItem.setText(resourceMap.getString("smpMenuItem.text"));
		fileMenu.add(smpMenuItem);

		jSeparator2.setName("jSeparator2"); // NOI18N
		fileMenu.add(jSeparator2);

		exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
		exitMenuItem.setName("exitMenuItem"); // NOI18N
		fileMenu.add(exitMenuItem);

		menuBar.add(fileMenu);

		helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
		helpMenu.setName("helpMenu"); // NOI18N

		aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
		aboutMenuItem.setName("aboutMenuItem"); // NOI18N
		helpMenu.add(aboutMenuItem);

		menuBar.add(helpMenu);

		statusPanel.setName("statusPanel"); // NOI18N

		statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

		statusMessageLabel.setName("statusMessageLabel"); // NOI18N

		statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
		statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

		progressBar.setName("progressBar"); // NOI18N

		javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
		statusPanel.setLayout(statusPanelLayout);
		statusPanelLayout.setHorizontalGroup(statusPanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 845, Short.MAX_VALUE)
				.addGroup(statusPanelLayout.createSequentialGroup().addContainerGap().addComponent(statusMessageLabel)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 675, Short.MAX_VALUE)
						.addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(statusAnimationLabel).addContainerGap()));
		statusPanelLayout.setVerticalGroup(statusPanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(statusPanelLayout.createSequentialGroup()
						.addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(statusMessageLabel).addComponent(statusAnimationLabel).addComponent(
										progressBar, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(3, 3, 3)));

		fileChooser.setTitle(resourceMap.getString("fileChooser.title")); // NOI18N
		fileChooser.setAlwaysOnTop(true);
		fileChooser.setLocationByPlatform(true);
		fileChooser.setMinimumSize(new java.awt.Dimension(620, 470));
		fileChooser.setModal(true);
		fileChooser.setName("fileChooser"); // NOI18N

		jFileChooser1.setFileFilter(null);
		jFileChooser1.setMinimumSize(new java.awt.Dimension(580, 400));
		jFileChooser1.setMultiSelectionEnabled(true);
		jFileChooser1.setName("jFileChooser1"); // NOI18N
		jFileChooser1.setPreferredSize(new java.awt.Dimension(580, 400));
		jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jFileChooser1ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout fileChooserLayout = new javax.swing.GroupLayout(fileChooser.getContentPane());
		fileChooser.getContentPane().setLayout(fileChooserLayout);
		fileChooserLayout
				.setHorizontalGroup(fileChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(fileChooserLayout.createSequentialGroup().addContainerGap()
								.addComponent(jFileChooser1, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addContainerGap(30, Short.MAX_VALUE)));
		fileChooserLayout
				.setVerticalGroup(fileChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(fileChooserLayout.createSequentialGroup().addContainerGap()
								.addComponent(jFileChooser1, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addContainerGap(61, Short.MAX_VALUE)));

		TSLProviderPanel.setName("TSLProviderPanel"); // NOI18N

		jLabel17.setText(resourceMap.getString("jLabel17.text")); // NOI18N
		jLabel17.setName("jLabel17"); // NOI18N

		textField_providerName.setText(resourceMap.getString("textField_providerName.text")); // NOI18N
		textField_providerName.setName("textField_providerName"); // NOI18N

		jLabel20.setText(resourceMap.getString("jLabel20.text")); // NOI18N
		jLabel20.setName("jLabel20"); // NOI18N

		textField_Provider_StreetAddress.setText(resourceMap.getString("textField_Provider_StreetAddress.text")); // NOI18N
		textField_Provider_StreetAddress.setName("textField_Provider_StreetAddress"); // NOI18N

		jLabel21.setText(resourceMap.getString("jLabel21.text")); // NOI18N
		jLabel21.setName("jLabel21"); // NOI18N

		jLabel22.setText(resourceMap.getString("jLabel22.text")); // NOI18N
		jLabel22.setName("jLabel22"); // NOI18N

		textField_Provider_Locality.setText(resourceMap.getString("textField_Provider_Locality.text")); // NOI18N
		textField_Provider_Locality.setName("textField_Provider_Locality"); // NOI18N

		textField_Provider_PostCode.setText(resourceMap.getString("textField_Provider_PostCode.text")); // NOI18N
		textField_Provider_PostCode.setName("textField_Provider_PostCode"); // NOI18N

		jLabel23.setText(resourceMap.getString("jLabel23.text")); // NOI18N
		jLabel23.setName("jLabel23"); // NOI18N

		jLabel24.setText(resourceMap.getString("jLabel24.text")); // NOI18N
		jLabel24.setName("jLabel24"); // NOI18N

		textField_Provider_CountryName.setText(resourceMap.getString("textField_Provider_CountryName.text")); // NOI18N
		textField_Provider_CountryName.setName("textField_Provider_CountryName"); // NOI18N

		language_Provider_Name.setModel(
				new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		language_Provider_Name.setName("language_Provider_Name"); // NOI18N

		textField_Provider_ElectronicAddress3
				.setText(resourceMap.getString("textField_Provider_ElectronicAddress3.text")); // NOI18N
		textField_Provider_ElectronicAddress3.setName("textField_Provider_ElectronicAddress3"); // NOI18N

		jLabel25.setText(resourceMap.getString("jLabel25.text")); // NOI18N
		jLabel25.setName("jLabel25"); // NOI18N

		textField_Provider_ElectronicAddress1
				.setText(resourceMap.getString("textField_Provider_ElectronicAddress1.text")); // NOI18N
		textField_Provider_ElectronicAddress1.setName("textField_Provider_ElectronicAddress1"); // NOI18N

		jLabel26.setText(resourceMap.getString("jLabel26.text")); // NOI18N
		jLabel26.setName("jLabel26"); // NOI18N

		jLabel27.setText(resourceMap.getString("jLabel27.text")); // NOI18N
		jLabel27.setName("jLabel27"); // NOI18N

		textField_Provider_ElectronicAddress2
				.setText(resourceMap.getString("textField_Provider_ElectronicAddress2.text")); // NOI18N
		textField_Provider_ElectronicAddress2.setName("textField_Provider_ElectronicAddress2"); // NOI18N

		jSeparator6.setName("jSeparator6"); // NOI18N

		jLabel28.setText(resourceMap.getString("jLabel28.text")); // NOI18N
		jLabel28.setName("jLabel28"); // NOI18N

		textField_Provider_Information.setText(resourceMap.getString("textField_Provider_Information.text")); // NOI18N
		textField_Provider_Information.setName("textField_Provider_Information"); // NOI18N

		language_Provider_Information.setModel(
				new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		language_Provider_Information.setName("language_Provider_Information"); // NOI18N

		language_Provider_Address.setModel(
				new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		language_Provider_Address.setName("language_Provider_Address"); // NOI18N

		jSeparator5.setName("jSeparator5"); // NOI18N

		javax.swing.GroupLayout TSLProviderPanelLayout = new javax.swing.GroupLayout(TSLProviderPanel);
		TSLProviderPanel.setLayout(TSLProviderPanelLayout);
		TSLProviderPanelLayout.setHorizontalGroup(
				TSLProviderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(TSLProviderPanelLayout
								.createSequentialGroup().addContainerGap().addGroup(TSLProviderPanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
										.addComponent(jSeparator5)
										.addGroup(javax.swing.GroupLayout.Alignment.LEADING, TSLProviderPanelLayout
												.createParallelGroup(
														javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 646,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGroup(javax.swing.GroupLayout.Alignment.LEADING,
														TSLProviderPanelLayout.createSequentialGroup()
																.addGap(11, 11, 11)
																.addGroup(TSLProviderPanelLayout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.TRAILING,
																				false)
																		.addGroup(
																				javax.swing.GroupLayout.Alignment.LEADING,
																				TSLProviderPanelLayout
																						.createSequentialGroup()
																						.addComponent(jLabel26)
																						.addPreferredGap(
																								javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																						.addComponent(
																								textField_Provider_ElectronicAddress2))
																		.addGroup(
																				javax.swing.GroupLayout.Alignment.LEADING,
																				TSLProviderPanelLayout
																						.createSequentialGroup()
																						.addComponent(jLabel25)
																						.addPreferredGap(
																								javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																						.addComponent(
																								textField_Provider_ElectronicAddress1,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								466,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addGroup(
																				javax.swing.GroupLayout.Alignment.LEADING,
																				TSLProviderPanelLayout
																						.createSequentialGroup()
																						.addGroup(TSLProviderPanelLayout
																								.createParallelGroup(
																										javax.swing.GroupLayout.Alignment.TRAILING)
																								.addComponent(jLabel28)
																								.addComponent(jLabel27))
																						.addPreferredGap(
																								javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																						.addGroup(TSLProviderPanelLayout
																								.createParallelGroup(
																										javax.swing.GroupLayout.Alignment.LEADING)
																								.addComponent(
																										textField_Provider_Information,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										464,
																										Short.MAX_VALUE)
																								.addComponent(
																										textField_Provider_ElectronicAddress3))))
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(language_Provider_Information,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addGroup(javax.swing.GroupLayout.Alignment.LEADING, TSLProviderPanelLayout
												.createSequentialGroup().addGap(29, 29, 29)
												.addGroup(TSLProviderPanelLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
														.addGroup(TSLProviderPanelLayout.createSequentialGroup()
																.addGroup(TSLProviderPanelLayout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																		.addComponent(jLabel20).addComponent(jLabel17))
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED))
														.addGroup(TSLProviderPanelLayout.createSequentialGroup()
																.addGroup(TSLProviderPanelLayout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.TRAILING)
																		.addComponent(jLabel22).addComponent(jLabel21)
																		.addComponent(jLabel23).addComponent(jLabel24))
																.addGap(18, 18, 18)))
												.addGroup(TSLProviderPanelLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
																false)
														.addComponent(textField_Provider_CountryName)
														.addComponent(textField_Provider_PostCode)
														.addComponent(textField_Provider_Locality)
														.addGroup(TSLProviderPanelLayout.createSequentialGroup()
																.addGap(2, 2, 2)
																.addComponent(textField_Provider_StreetAddress))
														.addGroup(TSLProviderPanelLayout.createSequentialGroup()
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(textField_providerName,
																		javax.swing.GroupLayout.DEFAULT_SIZE, 462,
																		Short.MAX_VALUE)))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addGroup(TSLProviderPanelLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(language_Provider_Address,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(language_Provider_Name,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))))
								.addContainerGap(39, Short.MAX_VALUE)));
		TSLProviderPanelLayout.setVerticalGroup(TSLProviderPanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(TSLProviderPanelLayout.createSequentialGroup().addGap(37, 37, 37)
						.addGroup(TSLProviderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(textField_providerName, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel17).addComponent(language_Provider_Name,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(3, 3, 3).addComponent(jLabel20)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(TSLProviderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(textField_Provider_StreetAddress, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel21).addComponent(language_Provider_Address,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(TSLProviderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(textField_Provider_Locality, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel22))
						.addGap(14, 14, 14)
						.addGroup(TSLProviderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(textField_Provider_PostCode, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel23))
						.addGap(13, 13, 13)
						.addGroup(TSLProviderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(textField_Provider_CountryName, javax.swing.GroupLayout.PREFERRED_SIZE,
										20, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel24))
						.addGap(18, 18, 18)
						.addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(TSLProviderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(textField_Provider_ElectronicAddress1,
										javax.swing.GroupLayout.PREFERRED_SIZE, 20,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel25))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(TSLProviderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(textField_Provider_ElectronicAddress2,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel26))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(TSLProviderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(textField_Provider_ElectronicAddress3,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel27))
						.addGap(18, 18, 18)
						.addGroup(TSLProviderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel28)
								.addComponent(textField_Provider_Information, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(language_Provider_Information, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap(44, Short.MAX_VALUE)));

		TSLServicePanel.setMaximumSize(new java.awt.Dimension(600, 600));
		TSLServicePanel.setName("TSLServicePanel"); // NOI18N

		jLabel18.setText(resourceMap.getString("jLabel18.text")); // NOI18N
		jLabel18.setName("jLabel18"); // NOI18N

		combo_ServiceTypeIdentifier.setModel(
				new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		combo_ServiceTypeIdentifier.setEnabled(false);
		combo_ServiceTypeIdentifier.setName("combo_ServiceTypeIdentifier"); // NOI18N

		jLabel29.setText(resourceMap.getString("jLabel29.text")); // NOI18N
		jLabel29.setName("jLabel29"); // NOI18N

		textField_Service_Name.setText(resourceMap.getString("textField_Service_Name.text")); // NOI18N
		textField_Service_Name.setName("textField_Service_Name"); // NOI18N

		language_Service_Name.setModel(
				new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		language_Service_Name.setName("language_Service_Name"); // NOI18N

		jLabel30.setText(resourceMap.getString("jLabel30.text")); // NOI18N
		jLabel30.setName("jLabel30"); // NOI18N

		addCertificateButton.setAction(actionMap.get("addCertificate")); // NOI18N
		addCertificateButton.setText(resourceMap.getString("addCertificateButton.text")); // NOI18N
		addCertificateButton.setName("addCertificateButton"); // NOI18N

		jLabel31.setText(resourceMap.getString("jLabel31.text")); // NOI18N
		jLabel31.setName("jLabel31"); // NOI18N

		combo_Service_Status.setModel(
				new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		combo_Service_Status.setName("combo_Service_Status"); // NOI18N

		jLabel32.setText(resourceMap.getString("jLabel32.text")); // NOI18N
		jLabel32.setName("jLabel32"); // NOI18N

		textField_Service_StartingTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
				new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy/MM/dd HH:mm:ss"))));
		textField_Service_StartingTime
				.setToolTipText(resourceMap.getString("textField_Service_StartingTime.toolTipText")); // NOI18N
		textField_Service_StartingTime.setName("textField_Service_StartingTime"); // NOI18N

		jLabel33.setText(resourceMap.getString("jLabel33.text")); // NOI18N
		jLabel33.setName("jLabel33"); // NOI18N

		textField_Service_SupplyPoint1.setText(resourceMap.getString("textField_Service_SupplyPoint1.text")); // NOI18N
		textField_Service_SupplyPoint1.setName("textField_Service_SupplyPoint1"); // NOI18N

		jLabel34.setText(resourceMap.getString("jLabel34.text")); // NOI18N
		jLabel34.setName("jLabel34"); // NOI18N

		textField_Service_SupplyPoint2.setText(resourceMap.getString("textField_Service_SupplyPoint2.text")); // NOI18N
		textField_Service_SupplyPoint2.setName("textField_Service_SupplyPoint2"); // NOI18N

		jLabel35.setText(resourceMap.getString("jLabel35.text")); // NOI18N
		jLabel35.setName("jLabel35"); // NOI18N

		textField_Service_SupplyPoint3.setText(resourceMap.getString("textField_Service_SupplyPoint3.text")); // NOI18N
		textField_Service_SupplyPoint3.setName("textField_Service_SupplyPoint3"); // NOI18N

		jScrollPane2.setName("jScrollPane2"); // NOI18N

		certificateList.setModel(new javax.swing.AbstractListModel() {
			String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };

			public int getSize() {
				return strings.length;
			}

			public Object getElementAt(int i) {
				return strings[i];
			}
		});
		certificateList.setName("certificateList"); // NOI18N
		jScrollPane2.setViewportView(certificateList);

		viewCertificateButton.setAction(actionMap.get("viewCertificate")); // NOI18N
		viewCertificateButton.setText(resourceMap.getString("viewCertificateButton.text")); // NOI18N
		viewCertificateButton.setName("viewCertificateButton"); // NOI18N

		deleteCertificateButton.setAction(actionMap.get("deleteCertificate")); // NOI18N
		deleteCertificateButton.setText(resourceMap.getString("deleteCertificateButton.text")); // NOI18N
		deleteCertificateButton.setName("deleteCertificateButton"); // NOI18N

		javax.swing.GroupLayout TSLServicePanelLayout = new javax.swing.GroupLayout(TSLServicePanel);
		TSLServicePanel.setLayout(TSLServicePanelLayout);
		TSLServicePanelLayout.setHorizontalGroup(TSLServicePanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TSLServicePanelLayout
						.createSequentialGroup().addGap(59, 59, 59).addGroup(TSLServicePanelLayout
								.createParallelGroup(
										javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(
										TSLServicePanelLayout.createSequentialGroup()
												.addGroup(
														TSLServicePanelLayout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.TRAILING)
																.addComponent(jLabel34).addComponent(jLabel31)
																.addComponent(jLabel30).addComponent(jLabel32)
																.addComponent(jLabel33).addComponent(
																		jLabel35,
																		javax.swing.GroupLayout.PREFERRED_SIZE, 106,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addGroup(TSLServicePanelLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
																false)
														.addComponent(combo_Service_Status,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(textField_Service_StartingTime,
																javax.swing.GroupLayout.PREFERRED_SIZE, 119,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(textField_Service_SupplyPoint2)
														.addComponent(textField_Service_SupplyPoint3,
																javax.swing.GroupLayout.DEFAULT_SIZE, 284,
																Short.MAX_VALUE)
														.addComponent(textField_Service_SupplyPoint1)))
								.addGroup(TSLServicePanelLayout.createSequentialGroup()
										.addGroup(TSLServicePanelLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(jLabel29).addComponent(jLabel18))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addGroup(TSLServicePanelLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(combo_ServiceTypeIdentifier,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGroup(TSLServicePanelLayout.createSequentialGroup().addGap(1, 1, 1)
														.addGroup(TSLServicePanelLayout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(addCertificateButton)
																.addGroup(TSLServicePanelLayout.createSequentialGroup()
																		.addGroup(TSLServicePanelLayout
																				.createParallelGroup(
																						javax.swing.GroupLayout.Alignment.TRAILING)
																				.addComponent(textField_Service_Name,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						180,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addComponent(jScrollPane2,
																						javax.swing.GroupLayout.Alignment.LEADING,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						179,
																						javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addGroup(TSLServicePanelLayout
																				.createParallelGroup(
																						javax.swing.GroupLayout.Alignment.LEADING)
																				.addGroup(TSLServicePanelLayout
																						.createSequentialGroup()
																						.addPreferredGap(
																								javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																						.addGroup(TSLServicePanelLayout
																								.createParallelGroup(
																										javax.swing.GroupLayout.Alignment.LEADING,
																										false)
																								.addComponent(
																										viewCertificateButton,
																										javax.swing.GroupLayout.Alignment.TRAILING,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										Short.MAX_VALUE)
																								.addComponent(
																										deleteCertificateButton,
																										javax.swing.GroupLayout.Alignment.TRAILING,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										Short.MAX_VALUE)))
																				.addGroup(
																						javax.swing.GroupLayout.Alignment.TRAILING,
																						TSLServicePanelLayout
																								.createSequentialGroup()
																								.addGap(37, 37, 37)
																								.addComponent(
																										language_Service_Name,
																										javax.swing.GroupLayout.PREFERRED_SIZE,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										javax.swing.GroupLayout.PREFERRED_SIZE)))))))))
						.addContainerGap(86, Short.MAX_VALUE)));
		TSLServicePanelLayout.setVerticalGroup(TSLServicePanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(TSLServicePanelLayout.createSequentialGroup().addGap(29, 29, 29)
						.addGroup(TSLServicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(combo_ServiceTypeIdentifier, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel18))
						.addGap(18, 18, 18)
						.addGroup(TSLServicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(textField_Service_Name, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(language_Service_Name, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel29))
						.addGap(18, 18, 18)
						.addGroup(TSLServicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jLabel30)
								.addGroup(TSLServicePanelLayout.createSequentialGroup()
										.addComponent(viewCertificateButton).addGap(8, 8, 8).addComponent(
												deleteCertificateButton))
								.addGroup(TSLServicePanelLayout.createSequentialGroup()
										.addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 91,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(addCertificateButton)))
						.addGap(18, 18, 18)
						.addGroup(TSLServicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(combo_Service_Status, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel31))
						.addGap(13, 13, 13)
						.addGroup(TSLServicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel32).addComponent(textField_Service_StartingTime,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(TSLServicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel33).addComponent(textField_Service_SupplyPoint1,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(17, 17, 17)
						.addGroup(TSLServicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(textField_Service_SupplyPoint2, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel34))
						.addGap(16, 16, 16)
						.addGroup(TSLServicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel35).addComponent(textField_Service_SupplyPoint3,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap(31, Short.MAX_VALUE)));

		TSLSignaturePanel.setName("TSLSignaturePanel"); // NOI18N

		jLabel19.setText(resourceMap.getString("jLabel19.text")); // NOI18N
		jLabel19.setName("jLabel19"); // NOI18N

		jLabel42.setText(resourceMap.getString("jLabel42.text")); // NOI18N
		jLabel42.setName("jLabel42"); // NOI18N

		jLabel43.setFont(resourceMap.getFont("jLabel43.font")); // NOI18N
		jLabel43.setText(resourceMap.getString("jLabel43.text")); // NOI18N
		jLabel43.setName("jLabel43"); // NOI18N

		textField_Signature_CanonicalizationMethod.setEditable(false);
		textField_Signature_CanonicalizationMethod
				.setText(resourceMap.getString("textField_Signature_CanonicalizationMethod.text")); // NOI18N
		textField_Signature_CanonicalizationMethod.setName("textField_Signature_CanonicalizationMethod"); // NOI18N

		textField_Signature_SignatureMethod.setEditable(false);
		textField_Signature_SignatureMethod.setText(resourceMap.getString("textField_Signature_SignatureMethod.text")); // NOI18N
		textField_Signature_SignatureMethod.setName("textField_Signature_SignatureMethod"); // NOI18N

		signButton.setAction(actionMap.get("signTSL")); // NOI18N
		signButton.setName("signButton"); // NOI18N

		jLabel44.setText(resourceMap.getString("jLabel44.text")); // NOI18N
		jLabel44.setName("jLabel44"); // NOI18N

		signatureIssuerName.setEditable(false);
		signatureIssuerName.setText(resourceMap.getString("signatureIssuerName.text")); // NOI18N
		signatureIssuerName.setName("signatureIssuerName"); // NOI18N

		jLabel45.setText(resourceMap.getString("jLabel45.text")); // NOI18N
		jLabel45.setName("jLabel45"); // NOI18N

		signatureSerialNumber.setEditable(false);
		signatureSerialNumber.setText(resourceMap.getString("signatureSerialNumber.text")); // NOI18N
		signatureSerialNumber.setName("signatureSerialNumber"); // NOI18N

		jLabel46.setText(resourceMap.getString("jLabel46.text")); // NOI18N
		jLabel46.setName("jLabel46"); // NOI18N

		signatureValidFrom.setEditable(false);
		signatureValidFrom.setText(resourceMap.getString("signatureValidFrom.text")); // NOI18N
		signatureValidFrom.setName("signatureValidFrom"); // NOI18N

		jLabel47.setText(resourceMap.getString("jLabel47.text")); // NOI18N
		jLabel47.setName("jLabel47"); // NOI18N

		signatureValidUntil.setEditable(false);
		signatureValidUntil.setText(resourceMap.getString("signatureValidUntil.text")); // NOI18N
		signatureValidUntil.setName("signatureValidUntil"); // NOI18N

		jLabel48.setText(resourceMap.getString("jLabel48.text")); // NOI18N
		jLabel48.setName("jLabel48"); // NOI18N

		signatureSubjectName.setEditable(false);
		signatureSubjectName.setText(resourceMap.getString("signatureSubjectName.text")); // NOI18N
		signatureSubjectName.setName("signatureSubjectName"); // NOI18N

		javax.swing.GroupLayout TSLSignaturePanelLayout = new javax.swing.GroupLayout(TSLSignaturePanel);
		TSLSignaturePanel.setLayout(TSLSignaturePanelLayout);
		TSLSignaturePanelLayout.setHorizontalGroup(
				TSLSignaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(TSLSignaturePanelLayout.createSequentialGroup().addGap(38, 38, 38)
								.addGroup(TSLSignaturePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addComponent(jLabel43).addComponent(jLabel42)
										.addComponent(jLabel19).addComponent(jLabel44).addComponent(jLabel45)
										.addComponent(jLabel46).addComponent(jLabel48).addComponent(jLabel47))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(TSLSignaturePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(
												signButton)
										.addGroup(TSLSignaturePanelLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
												.addComponent(textField_Signature_CanonicalizationMethod,
														javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
												.addComponent(textField_Signature_SignatureMethod,
														javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
												.addComponent(signatureIssuerName, javax.swing.GroupLayout.DEFAULT_SIZE,
														306, Short.MAX_VALUE)
												.addComponent(signatureSerialNumber).addComponent(signatureValidFrom)
												.addComponent(signatureSubjectName).addComponent(signatureValidUntil,
														javax.swing.GroupLayout.Alignment.TRAILING)))
								.addContainerGap(249, Short.MAX_VALUE)));
		TSLSignaturePanelLayout.setVerticalGroup(TSLSignaturePanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(TSLSignaturePanelLayout.createSequentialGroup().addGroup(TSLSignaturePanelLayout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(TSLSignaturePanelLayout.createSequentialGroup().addGap(31, 31, 31)
								.addGroup(TSLSignaturePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addComponent(textField_Signature_CanonicalizationMethod,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jLabel19))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(TSLSignaturePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabel42).addComponent(textField_Signature_SignatureMethod,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(jLabel43)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(TSLSignaturePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabel44).addComponent(signatureIssuerName,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(TSLSignaturePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabel45)
										.addComponent(signatureSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGap(12, 12, 12)
								.addGroup(TSLSignaturePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabel46).addComponent(signatureValidFrom,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(TSLSignaturePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(signatureValidUntil, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jLabel47)))
						.addGroup(TSLSignaturePanelLayout.createSequentialGroup().addGap(238, 238, 238)
								.addGroup(TSLSignaturePanelLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(signatureSubjectName, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jLabel48))))
						.addGap(18, 18, 18).addComponent(signButton).addContainerGap(113, Short.MAX_VALUE)));

		digitalIdDialog.setTitle(resourceMap.getString("digitalIdDialog.title")); // NOI18N
		digitalIdDialog.setAlwaysOnTop(true);
		digitalIdDialog.setLocationByPlatform(true);
		digitalIdDialog.setMinimumSize(new java.awt.Dimension(520, 300));
		digitalIdDialog.setName("digitalIdDialog"); // NOI18N

		jLabel37.setFont(resourceMap.getFont("jLabel37.font")); // NOI18N
		jLabel37.setText(resourceMap.getString("jLabel37.text")); // NOI18N
		jLabel37.setName("jLabel37"); // NOI18N

		jButton2.setAction(actionMap.get("cancelDigitalIdDialog")); // NOI18N
		jButton2.setName("jButton2"); // NOI18N

		jLabel36.setText(resourceMap.getString("jLabel36.text")); // NOI18N
		jLabel36.setName("jLabel36"); // NOI18N

		jLabel38.setText(resourceMap.getString("jLabel38.text")); // NOI18N
		jLabel38.setName("jLabel38"); // NOI18N

		jLabel39.setText(resourceMap.getString("jLabel39.text")); // NOI18N
		jLabel39.setName("jLabel39"); // NOI18N

		jLabel40.setText(resourceMap.getString("jLabel40.text")); // NOI18N
		jLabel40.setName("jLabel40"); // NOI18N

		jLabel41.setText(resourceMap.getString("jLabel41.text")); // NOI18N
		jLabel41.setName("jLabel41"); // NOI18N

		certificateIssuerName.setEditable(false);
		certificateIssuerName.setText(resourceMap.getString("certificateIssuerName.text")); // NOI18N
		certificateIssuerName.setMaximumSize(new java.awt.Dimension(256, 20));
		certificateIssuerName.setName("certificateIssuerName"); // NOI18N
		certificateIssuerName.setPreferredSize(new java.awt.Dimension(256, 20));

		certificateSerialNumber.setEditable(false);
		certificateSerialNumber.setText(resourceMap.getString("certificateSerialNumber.text")); // NOI18N
		certificateSerialNumber.setMaximumSize(new java.awt.Dimension(256, 20));
		certificateSerialNumber.setName("certificateSerialNumber"); // NOI18N
		certificateSerialNumber.setPreferredSize(new java.awt.Dimension(256, 20));

		certificateValidFrom.setEditable(false);
		certificateValidFrom.setText(resourceMap.getString("certificateValidFrom.text")); // NOI18N
		certificateValidFrom.setName("certificateValidFrom"); // NOI18N

		certificateValidUntil.setEditable(false);
		certificateValidUntil.setText(resourceMap.getString("certificateValidUntil.text")); // NOI18N
		certificateValidUntil.setMaximumSize(new java.awt.Dimension(256, 20));
		certificateValidUntil.setName("certificateValidUntil"); // NOI18N
		certificateValidUntil.setPreferredSize(new java.awt.Dimension(256, 20));

		certificateSubjectName.setEditable(false);
		certificateSubjectName.setText(resourceMap.getString("certificateSubjectName.text")); // NOI18N
		certificateSubjectName.setMaximumSize(new java.awt.Dimension(256, 20));
		certificateSubjectName.setName("certificateSubjectName"); // NOI18N
		certificateSubjectName.setPreferredSize(new java.awt.Dimension(256, 20));

		javax.swing.GroupLayout digitalIdDialogLayout = new javax.swing.GroupLayout(digitalIdDialog.getContentPane());
		digitalIdDialog.getContentPane().setLayout(digitalIdDialogLayout);
		digitalIdDialogLayout.setHorizontalGroup(digitalIdDialogLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(digitalIdDialogLayout.createSequentialGroup().addGap(25, 25, 25).addGroup(
						digitalIdDialogLayout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
										digitalIdDialogLayout.createSequentialGroup()
												.addGroup(
														digitalIdDialogLayout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.TRAILING)
																.addComponent(jLabel38).addComponent(jLabel39)
																.addComponent(jLabel40).addComponent(jLabel41)
																.addComponent(jLabel36).addComponent(jLabel37))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(digitalIdDialogLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
																false)
														.addComponent(certificateSubjectName,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
														.addComponent(certificateValidUntil,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
														.addComponent(certificateValidFrom,
																javax.swing.GroupLayout.DEFAULT_SIZE, 189,
																Short.MAX_VALUE)
														.addComponent(certificateSerialNumber,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
														.addComponent(certificateIssuerName,
																javax.swing.GroupLayout.PREFERRED_SIZE, 306,
																javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addGroup(digitalIdDialogLayout.createSequentialGroup().addGap(180, 180, 180)
										.addComponent(jButton2)))
						.addContainerGap(64, Short.MAX_VALUE)));
		digitalIdDialogLayout.setVerticalGroup(digitalIdDialogLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(digitalIdDialogLayout.createSequentialGroup().addGap(20, 20, 20).addComponent(jLabel37)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(digitalIdDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel36).addComponent(certificateIssuerName,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(digitalIdDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel38).addComponent(certificateSerialNumber,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(digitalIdDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel39).addComponent(certificateValidFrom,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(digitalIdDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel40).addComponent(certificateValidUntil,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(digitalIdDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel41).addComponent(certificateSubjectName,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jButton2)
						.addContainerGap(22, Short.MAX_VALUE)));

		certificateFileDialog.setTitle(resourceMap.getString("certificateFileDialog.title")); // NOI18N
		certificateFileDialog.setLocationByPlatform(true);
		certificateFileDialog.setMinimumSize(new java.awt.Dimension(620, 470));
		certificateFileDialog.setName("certificateFileDialog"); // NOI18N

		certificateFileChooser.setName("certificateFileChooser"); // NOI18N
		certificateFileChooser.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				certificateFileChooserActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout certificateFileDialogLayout = new javax.swing.GroupLayout(
				certificateFileDialog.getContentPane());
		certificateFileDialog.getContentPane().setLayout(certificateFileDialogLayout);
		certificateFileDialogLayout.setHorizontalGroup(certificateFileDialogLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 582, Short.MAX_VALUE)
				.addGroup(certificateFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(certificateFileDialogLayout.createSequentialGroup().addGap(0, 0, Short.MAX_VALUE)
								.addComponent(certificateFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(0, 0, Short.MAX_VALUE))));
		certificateFileDialogLayout.setVerticalGroup(certificateFileDialogLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 397, Short.MAX_VALUE)
				.addGroup(certificateFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(certificateFileDialogLayout.createSequentialGroup().addGap(0, 0, Short.MAX_VALUE)
								.addComponent(certificateFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(0, 0, Short.MAX_VALUE))));

		signatureFileDialog.setTitle(resourceMap.getString("signatureFileDialog.title")); // NOI18N
		signatureFileDialog.setLocationByPlatform(true);
		signatureFileDialog.setMinimumSize(new java.awt.Dimension(660, 650));
		signatureFileDialog.setName("signatureFileDialog"); // NOI18N

		jPanel1.setName("jPanel1"); // NOI18N

		jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
		jPanel2.setName("jPanel2"); // NOI18N

		jLabel50.setText(resourceMap.getString("jLabel50.text")); // NOI18N
		jLabel50.setName("jLabel50"); // NOI18N

		jLabel51.setText(resourceMap.getString("jLabel51.text")); // NOI18N
		jLabel51.setName("jLabel51"); // NOI18N

		keyStorePassword.setText(resourceMap.getString("keyStorePassword.text")); // NOI18N
		keyStorePassword.setMinimumSize(new java.awt.Dimension(110, 20));
		keyStorePassword.setName("keyStorePassword"); // NOI18N

		keyPassword.setText(resourceMap.getString("keyPassword.text")); // NOI18N
		keyPassword.setMinimumSize(new java.awt.Dimension(110, 20));
		keyPassword.setName("keyPassword"); // NOI18N

		jLabel49.setText(resourceMap.getString("jLabel49.text")); // NOI18N
		jLabel49.setName("jLabel49"); // NOI18N

		keyAlias.setText(resourceMap.getString("keyAlias.text")); // NOI18N
		keyAlias.setMinimumSize(new java.awt.Dimension(110, 20));
		keyAlias.setName("keyAlias"); // NOI18N

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup().addGap(123, 123, 123)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(jLabel50).addComponent(jLabel49).addComponent(jLabel51))
						.addGap(18, 18, 18)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(keyStorePassword, javax.swing.GroupLayout.DEFAULT_SIZE, 185,
										Short.MAX_VALUE)
								.addComponent(keyPassword, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(keyAlias, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
						.addContainerGap(151, Short.MAX_VALUE)));
		jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup().addContainerGap()
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel49).addComponent(keyStorePassword,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel50).addComponent(keyPassword,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel51).addComponent(keyAlias, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
		jPanel3.setName("jPanel3"); // NOI18N

		signatureFileChooser.setName("signatureFileChooser"); // NOI18N
		signatureFileChooser.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				signatureFileChooserActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout
				.setHorizontalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(signatureFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap()));
		jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel3Layout.createSequentialGroup().addGap(20, 20, 20)
						.addComponent(signatureFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		jLabel52.setFont(resourceMap.getFont("jLabel52.font")); // NOI18N
		jLabel52.setText(resourceMap.getString("jLabel52.text")); // NOI18N
		jLabel52.setName("jLabel52"); // NOI18N

		jLabel53.setFont(resourceMap.getFont("jLabel53.font")); // NOI18N
		jLabel53.setText(resourceMap.getString("jLabel53.text")); // NOI18N
		jLabel53.setName("jLabel53"); // NOI18N

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addGroup(jPanel1Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel1Layout.createSequentialGroup()
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addGap(19, 19, 19))
						.addGroup(jPanel1Layout.createSequentialGroup().addComponent(jLabel52).addContainerGap(495,
								Short.MAX_VALUE))
						.addGroup(jPanel1Layout.createSequentialGroup().addComponent(jLabel53).addContainerGap(502,
								Short.MAX_VALUE)))));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addComponent(jLabel52).addGap(8, 8, 8)
						.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
						.addComponent(jLabel53).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap()));

		javax.swing.GroupLayout signatureFileDialogLayout = new javax.swing.GroupLayout(
				signatureFileDialog.getContentPane());
		signatureFileDialog.getContentPane().setLayout(signatureFileDialogLayout);
		signatureFileDialogLayout.setHorizontalGroup(
				signatureFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(signatureFileDialogLayout.createSequentialGroup()
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(
										jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)));
		signatureFileDialogLayout.setVerticalGroup(
				signatureFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(
						jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
						javax.swing.GroupLayout.PREFERRED_SIZE));

		treePopupMenu.setName("treePopupMenu"); // NOI18N

		ftpDialog.setLocationByPlatform(true);
		ftpDialog.setMinimumSize(new java.awt.Dimension(400, 300));
		ftpDialog.setName("ftpDialog"); // NOI18N

		jLabel54.setText(resourceMap.getString("jLabel54.text")); // NOI18N
		jLabel54.setName("jLabel54"); // NOI18N

		jLabel55.setText(resourceMap.getString("jLabel55.text")); // NOI18N
		jLabel55.setName("jLabel55"); // NOI18N

		ftpServerField.setText(resourceMap.getString("ftpServerField.text")); // NOI18N
		ftpServerField.setName("ftpServerField"); // NOI18N

		ftpUploadPathField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "/PROD", "/PPT" })); // NOI18N
		ftpUploadPathField.setName("ftpUploadPathField"); // NOI18N
		// ftpUploadPathField.setText(resourceMap.getString("ftpUploadPathField.text"));
		// // NOI18N
		// ftpUploadPathField.setName("ftpUploadPathField"); // NOI18N

		ftpUserName.setText(resourceMap.getString("ftpUserName.text")); // NOI18N
		ftpUserName.setName("ftpUserName"); // NOI18N

		jLabel56.setText(resourceMap.getString("jLabel56.text")); // NOI18N
		jLabel56.setName("jLabel56"); // NOI18N

		jLabel57.setText(resourceMap.getString("jLabel57.text")); // NOI18N
		jLabel57.setName("jLabel57"); // NOI18N

		jButton1.setAction(actionMap.get("ftpUploadTSL")); // NOI18N
		jButton1.setName("jButton1"); // NOI18N

		jLabel58.setFont(resourceMap.getFont("jLabel58.font")); // NOI18N
		jLabel58.setText(resourceMap.getString("jLabel58.text")); // NOI18N
		jLabel58.setName("jLabel58"); // NOI18N

		ftpPrivateKey.setName("ftpPrivateKey"); // NOI18N

		javax.swing.GroupLayout ftpDialogLayout = new javax.swing.GroupLayout(ftpDialog.getContentPane());
		ftpDialog.getContentPane().setLayout(ftpDialogLayout);
		ftpDialogLayout.setHorizontalGroup(ftpDialogLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ftpDialogLayout.createSequentialGroup()
						.addContainerGap(58, Short.MAX_VALUE)
						.addGroup(ftpDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jLabel58)
								.addGroup(ftpDialogLayout.createSequentialGroup().addGroup(
										ftpDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jLabel54).addComponent(jLabel55).addComponent(jLabel56)
												.addComponent(jLabel57))
										.addGap(27, 27, 27)
										.addGroup(ftpDialogLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jButton1)
												.addGroup(ftpDialogLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
																false)
														.addComponent(ftpUploadPathField)
														.addComponent(ftpServerField,
																javax.swing.GroupLayout.DEFAULT_SIZE, 209,
																Short.MAX_VALUE)
														.addComponent(ftpUserName).addComponent(ftpPrivateKey,
																javax.swing.GroupLayout.Alignment.TRAILING)))))
						.addGap(48, 48, 48)));
		ftpDialogLayout.setVerticalGroup(ftpDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(ftpDialogLayout.createSequentialGroup().addContainerGap().addComponent(jLabel58)
						.addGap(15, 15, 15)
						.addGroup(ftpDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel54).addComponent(ftpServerField,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(ftpDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel55).addComponent(ftpUploadPathField,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(ftpDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(ftpUserName, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel56))
						.addGap(18, 18, 18)
						.addGroup(ftpDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(ftpPrivateKey, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel57))
						.addGap(52, 52, 52).addComponent(jButton1).addContainerGap(23, Short.MAX_VALUE)));

		setComponent(mainPanel);
		setMenuBar(menuBar);
		setStatusBar(statusPanel);
	}// </editor-fold>//GEN-END:initComponents

	/*
	 * This method is called when the user chooses a file from the file chooser
	 * to open a new TSL in the UI. The file is read, parsed, and the new TSL is
	 * displayed in the corresponding frames of the UI.
	 */
	private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jFileChooser1ActionPerformed

		if (evt.getActionCommand().equals("CancelSelection"))
			this.fileChooser.setVisible(false);
		else {
			emptyAllFormFields();

			File xmlFile = this.jFileChooser1.getSelectedFile();
			this.tslFile = xmlFile;
			try {
				this.trustServiceList = TrustServiceListFactory.newInstance(xmlFile);

				// correct the trouble with policy parsing
				NodeList policy = this.trustServiceList.tslDocument.getElementsByTagName("tsl:TSLPolicy");
				if (policy != null && policy.item(0) != null) {
					Node uri = policy.item(0);
					uri = uri.getChildNodes().item(0);
					try {
						String lang = uri.getAttributes().getNamedItem("xml:lang").getNodeValue();
						String policyValue = uri.getNodeValue();

						NonEmptyMultiLangURIType uri2 = new NonEmptyMultiLangURIType();
						uri2.setLang(lang);
						uri2.setValue(policyValue);
						PolicyOrLegalnoticeType pol = new PolicyOrLegalnoticeType();
						pol.getTSLPolicy().add(uri2);
						this.trustServiceList.getTrustStatusList().getSchemeInformation().setPolicyOrLegalNotice(pol);
					} catch (Exception e) {
					}
				}

				this.fileChooser.setVisible(false);
				showTSLEnvelope(true);
			} catch (Exception io) {
				LOGGER.error("Exception: " + io.getMessage());
			}
		}

	}// GEN-LAST:event_jFileChooser1ActionPerformed

	/**
	 * This is called when the user chooses a certificate file from the file
	 * chooser, to add a digital id to a trust service. The file is read,
	 * parsed, the certificate is validated and added to the trust service
	 * object
	 *
	 * @param evt
	 */
	private void certificateFileChooserActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_certificateFileChooserActionPerformed
		if (evt.getActionCommand().equals("CancelSelection"))
			this.certificateFileDialog.setVisible(false);
		else {
			File crtFile = this.certificateFileChooser.getSelectedFile();
			if (crtFile != null && crtFile.length() > 0) {
				try {
					byte[] x509CertificateData = new byte[(int) crtFile.length()];
					BufferedInputStream in = new BufferedInputStream(new FileInputStream(crtFile));
					in.read(x509CertificateData);

					try {
						X509Certificate certificate = (X509Certificate) certificateFactory
								.generateCertificate(new ByteArrayInputStream(x509CertificateData));

						if (certificate != null && this.currentTreeNode != null
								&& this.currentTreeNode.getUserObject() instanceof TrustService) {
							TrustService service = (TrustService) this.currentTreeNode.getUserObject();
							DigitalIdentityType newCertificateType = this.objectFactory.createDigitalIdentityType();
							newCertificateType.setX509Certificate(x509CertificateData);

							DigitalIdentityListType idList = service.getTSPService().getServiceInformation()
									.getServiceDigitalIdentity();
							if (idList == null) {
								idList = objectFactory.createDigitalIdentityListType();
								service.getTSPService().getServiceInformation().setServiceDigitalIdentity(idList);
							}
							List<DigitalIdentityType> ids = idList.getDigitalId();
							ids.add(newCertificateType);

							String certSubjectName = ValidatorUtil.getUniqueSubjectLine(certificate);
							((DefaultListModel) this.certificateList.getModel()).addElement(certSubjectName);
						}
					} catch (CertificateException e) {
						LOGGER.error("CertificateException: " + e.getMessage());
					}

					this.certificateFileDialog.setVisible(false);
				} catch (Exception io) {
					LOGGER.error("Exception: " + io.getMessage());
				}
			}
		}

	}// GEN-LAST:event_certificateFileChooserActionPerformed

	/**
	 * This is called when the user chooses a file from the file chooser in
	 * order to digitally sign the complete TSL envelope. The file chosen,
	 * together with the key alias and passwords entered by the user are used to
	 * read the signature file, extract the X509 certificate from the key store
	 * and use it to sign the XML of the TSL. The result is shown in the UI tab
	 * for the TSL signature.
	 *
	 * @param evt
	 */
	private void signatureFileChooserActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_signatureFileChooserActionPerformed
		if (!evt.getActionCommand().equals("CancelSelection")) {
			if (ValidatorUtil.isNull(this.keyAlias) || ValidatorUtil.isNull(this.keyPassword)
					|| ValidatorUtil.isNull(this.keyStorePassword)) {
				JOptionPane.showMessageDialog(this.signatureFileDialog,
						"You must enter all the key store details required first", "Error Message",
						JOptionPane.ERROR_MESSAGE);
				return;
			}

			File sigFile = this.signatureFileChooser.getSelectedFile();
			try {
				KeyStore keyStore = KeyStore.getInstance("JKS");
				keyStore.load(new FileInputStream(sigFile), this.keyStorePassword.getPassword());

				PrivateKey privateKey = (PrivateKey) keyStore.getKey(new String(this.keyAlias.getPassword()),
						this.keyPassword.getPassword());

				X509Certificate cert = (X509Certificate) keyStore
						.getCertificate(new String(this.keyAlias.getPassword()));
				this.trustServiceList.sign(privateKey, cert);

				// after this we need to reload the model from the dom
				this.trustServiceList = TrustServiceListFactory.newInstance(this.trustServiceList.tslDocument,
						this.tslFile);

				// and show the signature file again
				this.showTSLSignature();

			} catch (Exception e) {
				LOGGER.error("Exception: " + e.getMessage());
				JOptionPane.showMessageDialog(this.jSplitPane1, "XML Signature of TSL Failed", "XML Signature Error",
						JOptionPane.ERROR_MESSAGE);
			}

		}

		this.signatureFileDialog.setVisible(false);
	}// GEN-LAST:event_signatureFileChooserActionPerformed

	@Action
	/**
	 * This is called when the user chooses the "New" option from them menu bar.
	 * A new empty TSL object is created and initialized to comply to the
	 * OpenNCP specifications. The empty TSL is shown to the user in the
	 * corresponding frames of the UI.
	 */
	public void newTSL() {

		emptyAllFormFields();
		this.tslFile = null;
		this.currentTreeNode = null;
		this.currentPopupSelectedTreePath = null;

		Object[] countries = { "Belgique/België", "България", "Česká republika", "Danmark", "Deutschland", "Eesti",
				"Éire/Ireland", "Ελλάδα", "España", "France", "Hrvatska", "Italia", "Κύπρος", "Latvija", "Lietuva",
				"Luxembourg", "Magyarország", "Malta", "Nederland", "Österreich", "Polska", "Portugal", "România",
				"Slovenija", "Slovensko", "Suomi/Finland", "Sverige", "United Kingdom", "Switzerland", "Turkey",
				"European Commission" };

		String value = (String) JOptionPane.showInputDialog(null, "NCP member: ",
				"Select your country to initialize TSL:", JOptionPane.QUESTION_MESSAGE, null, countries, countries[0]);

		String isoCode = "";
		String countryName = "";

		switch (value) {
		case "България":
			isoCode = "BG";
			countryName = "Bulgaria";
			break;
		case "Belgique/België":
			isoCode = "BE";
			countryName = "Belgium";
			break;
		case "Česká republika":
			isoCode = "CZ";
			countryName = "Czech Republic";
			break;
		case "Danmark":
			isoCode = "DK";
			countryName = "Denmark";
			break;
		case "Deutschland":
			isoCode = "DE";
			countryName = "Germany";
			break;
		case "Eesti":
			isoCode = "EE";
			countryName = "Estonia";
			break;
		case "Éire/Ireland":
			isoCode = "";
			countryName = "Ireland";
			break;
		case "Ελλάδα":
			isoCode = "GR";
			countryName = "Greece";
			break;
		case "España":
			isoCode = "ES";
			countryName = "Spain";
			break;
		case "France":
			isoCode = "FR";
			countryName = "France";
			break;
		case "Hrvatska":
			isoCode = "HR";
			countryName = "Croatia";
			break;
		case "Italia":
			isoCode = "IT";
			countryName = "Italy";
			break;
		case "Κύπρος":
			isoCode = "CY";
			countryName = "Cyprus";
			break;
		case "Latvija":
			isoCode = "LV";
			countryName = "Latvia";
			break;
		case "Lietuva":
			isoCode = "LT";
			countryName = "Lithuania";
			break;
		case "Luxembourg":
			isoCode = "LU";
			countryName = "Luxembourg";
			break;
		case "Magyarország":
			isoCode = "HU";
			countryName = "Hungary";
			break;
		case "Malta":
			isoCode = "MT";
			countryName = "Malta";
			break;
		case "Nederland":
			isoCode = "NL";
			countryName = "Netherlands";
			break;
		case "Österreich":
			isoCode = "AT";
			countryName = "Austria";
			break;
		case "Polska":
			isoCode = "Poland";
			countryName = "PL";
			break;
		case "Portugal":
			isoCode = "Portugal";
			countryName = "PT";
			break;
		case "România":
			isoCode = "RO";
			countryName = "Romania";
			break;
		case "Slovenija":
			isoCode = "SI";
			countryName = "Slovenia";
			break;
		case "Slovensko":
			isoCode = "SK";
			countryName = "Slovakia";
			break;
		case "Suomi/Finland":
			isoCode = "FI";
			countryName = "Finland";
			break;
		case "Sverige":
			isoCode = "SE";
			countryName = "Sweden";
			break;
		case "United Kingdom":
			isoCode = "GB";
			countryName = "United Kingdom";
			break;
		case "Switzerland":
			isoCode = "CH";
			countryName = "Switzerland";
			break;
		case "Turkey":
			isoCode = "TR";
			countryName = "Turkey";
			break;
		default:
			isoCode = "EU";
			countryName = "European Commission";
		}
		initializeEmptyTSL(isoCode, countryName);
		showTSLEnvelope(true);
	}

	@Action
	/**
	 * This is called when the user chooses the "Save" option from the menu bar.
	 * A validation is performed on the currently built TSL and if it is valid
	 * the list is saved as a file with the same name in the file system. If a
	 * previous file with this name exists, it is renamed with a version number
	 * based on the current timestamp, to ensure previous versions are kept
	 * safe. If there are validation errors, no file saving is performed, and
	 * instead a warning window is shown to the user with the list of validation
	 * errors found. If the file is saved successfully, an information window is
	 * shown to the user, with the complete path and filename of the file just
	 * saved.
	 */
	public boolean saveTSL() {
		if (currentTreeNode != null)
			writeModelFields(currentTreeNode);

		if (!validate())
			return false;

		try {
			if (this.tslFile != null) {
				Date now = new Date();
				String versionPostFix = fileVersionFormatter.format(now);
				String newFilePath = this.tslFile.getAbsolutePath() + "_v_" + versionPostFix + ".xml";
				File oldVersion = new File(newFilePath);
				oldVersion.createNewFile();

				FileReader in = new FileReader(this.tslFile);
				FileWriter out = new FileWriter(oldVersion);
				int c;
				while ((c = in.read()) != -1)
					out.write(c);

				in.close();
				out.close();

			} else {
				String homeDirectory = System.getProperty("user.home");
				String schemeName = this.trustServiceList.getSchemeName();
				schemeName = schemeName.replace(' ', '_');
				schemeName = schemeName.replace('\\', '_');
				schemeName = schemeName.replace('/', '_');
				schemeName = schemeName.replace(':', '_');
				schemeName = schemeName.replace('-', '_');
				schemeName = schemeName.replace('(', '_');
				schemeName = schemeName.replace(')', '_');
				schemeName = schemeName + ".xml";
				File parentDir = new File(homeDirectory + File.separator + "TslEditor" + File.separator);
				parentDir.mkdirs();

				schemeName = parentDir.getAbsolutePath() + File.separator + schemeName;
				this.tslFile = new File(schemeName);
				this.tslFile.createNewFile();
			}

			this.trustServiceList.saveAs(this.tslFile);

			JOptionPane.showMessageDialog(this.jSplitPane1,
					"A new XML document has been saved at the location: \n\t" + this.tslFile.getAbsolutePath()
							+ "\n Any previous file with the same name has been copied with a version number using the current date and time.",
					"File Saved", JOptionPane.INFORMATION_MESSAGE);

			return true;

		} catch (Exception e) {
			LOGGER.error("Exception: " + e.getMessage());
		}
		return false;
	}

	@Action
	/**
	 * This is called when the user chooses the "Preview" link of the menu bar.
	 * The currently built TSL is saved as a Pdf file (after an XSL
	 * transformation of the XML) at the same path as the current TSL file (or
	 * if that has not been created yet, at the user home directory under a
	 * sub-directory "TslEditor". The file can be then copied/printed by the
	 * user. The application also starts up the system's Pdf viewer (if the OS
	 * is Windows, or Linux with xpdf installed) to show the file to the user.
	 * If the currently built TSL is not complete enough for the XSL
	 * transformation to run correctly on it to transform it to a pdf document,
	 * an error window is shown to the user, informing them that the pdf preview
	 * cannot be created at this time.
	 */
	public void previewTSL() {
		Tsl2PdfExporter exporter = new Tsl2PdfExporter();
		String filePath = null;
		if (this.tslFile != null)
			filePath = this.tslFile.getAbsolutePath() + ".pdf";
		else {
			String homeDirectory = System.getProperty("user.home");
			filePath = this.trustServiceList.getSchemeName();
			filePath = filePath.replace(' ', '_');
			filePath = filePath.replace('\\', '_');
			filePath = filePath.replace('/', '_');
			filePath = filePath.replace(':', '_');
			filePath = filePath.replace('-', '_');
			filePath = filePath.replace('(', '_');
			filePath = filePath.replace(')', '_');
			filePath = filePath + ".xml.pdf";
			File parentDir = new File(homeDirectory + File.separator + "TslEditor" + File.separator);
			parentDir.mkdirs();
			filePath = parentDir.getAbsolutePath() + File.separator + filePath;
		}
		File pdfFile = new File(filePath);
		try {
			pdfFile.createNewFile();
			exporter.humanReadableExport(this.trustServiceList, pdfFile);
			try {
				Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + pdfFile.getAbsolutePath());
			} catch (Exception e1) {
				try {
					Runtime.getRuntime().exec("acroread " + pdfFile.getAbsolutePath());
				} catch (Exception e2) {
					try {
						Runtime.getRuntime().exec("xpdf " + pdfFile.getAbsolutePath());
					} catch (Exception e3) {
						JOptionPane
								.showMessageDialog(this.jSplitPane1,
										"A pdf document of the preview has been created at the location: \n\t"
												+ pdfFile.getAbsolutePath(),
										"PDF Saved", JOptionPane.INFORMATION_MESSAGE);
					}
				}
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this.jSplitPane1,
					"No pdf preview could be created at this time. \nPlease check that you have entered all fields correctly, \nby means of attempting to save this TSL file first.",
					"PDF Creation Error", JOptionPane.ERROR_MESSAGE);
		}
	}

	@Action
	/**
	 * This is called when the user chooses the "Open" option from the menu bar.
	 * It opens a file chooser window for the user to select a TSL XML file to
	 * open in the UI.
	 */
	public void openTSL() {
		this.fileChooser.setVisible(true);
	}

	@Action
	/**
	 * This is called when the user chooses the "SMP" option from the File menu.
	 * It opens the SMP window for TSL-to-SMP transformation and SMP files
	 * upload.
	 */
	public void openSMP() {
		TransformatorUI.main(null);
	}

	/**
	 * This is called when the user chooses the "Add Service" menu item of the
	 * pop-up menu on the TSL tree frame. The specific service chosen by the
	 * user, is passed as an "identifier" argument. The service in question is
	 * initialized according to the EPSOS Specification and added to the current
	 * TSL under the currently selected NCP.
	 *
	 * @param identifier
	 */
	public void addService(String identifier) {
		if (this.currentPopupSelectedTreePath != null) {
			DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) this.currentPopupSelectedTreePath
					.getLastPathComponent();
			Object obj = treeNode.getUserObject();
			if (obj instanceof TrustServiceProvider) {
				// add a new service under this provider
				TrustService newService = initEmptyService(identifier, identifier);
				((TrustServiceProvider) obj).addTrustService(newService);

				// change tree model also
				DefaultMutableTreeNode newChild = new DefaultMutableTreeNode(newService);
				treeNode.add(newChild);
				((DefaultTreeModel) this.jTree.getModel()).nodesWereInserted(treeNode,
						new int[] { treeNode.getIndex(newChild) });
			} else if (obj instanceof TrustService) {
				// add a new service, but need to find which providerparent to
				// hang it from
				DefaultMutableTreeNode parent = (DefaultMutableTreeNode) treeNode.getParent();
				obj = parent.getUserObject();
				if (obj instanceof TrustServiceProvider) {
					// add a new service under this provider
					TrustService newService = initEmptyService(identifier, identifier);
					((TrustServiceProvider) obj).addTrustService(newService);

					// change tree model also
					DefaultMutableTreeNode newChild = new DefaultMutableTreeNode(newService);
					parent.add(newChild);
					((DefaultTreeModel) this.jTree.getModel()).nodesWereInserted(parent,
							new int[] { parent.getIndex(newChild) });
				}
			} else {
				// do nothing
			}
		}
		this.currentPopupSelectedTreePath = null;
	}

	@Action
	/**
	 * This is called when the user selects the "Delete Service" option from the
	 * pop-up menu on the TSL tree frame, by right-clicking on a service node.
	 * This will delete the selected service from the currently selected NCP of
	 * the currently built TSL
	 */
	public void deleteNode() {
		if (this.currentPopupSelectedTreePath != null) {
			DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) this.currentPopupSelectedTreePath
					.getLastPathComponent();
			Object obj = treeNode.getUserObject();
			if (obj instanceof TrustService) {
				// delete this service
				TrustService serviceToDelete = (TrustService) obj;
				DefaultMutableTreeNode parent = (DefaultMutableTreeNode) treeNode.getParent();
				obj = parent.getUserObject();
				if (obj instanceof TrustServiceProvider) {
					TrustServiceProvider provider = ((TrustServiceProvider) obj);
					List<TSPServiceType> services = provider.getTSP().getTSPServices().getTSPService();
					if (services != null) {
						for (TSPServiceType s : services) {
							if (serviceToDelete.getTSPService().getServiceInformation().getServiceTypeIdentifier()
									.equals(s.getServiceInformation().getServiceTypeIdentifier())) {
								services.remove(s);

								// change tree model also
								int index = parent.getIndex(treeNode);
								parent.remove(treeNode);
								((DefaultTreeModel) this.jTree.getModel()).nodesWereRemoved(parent, new int[] { index },
										new Object[] { treeNode });

								break;
							}
						}
					}

				}
			} else {
				// do nothing, cannot delete a provider or the complete list
			}
		}
		this.currentPopupSelectedTreePath = null;
	}

	/**
	 * This initializes a complete new empty TSL based on the EPSOS
	 * specifications, ready to be filled in with the user-required information.
	 * It created an envelope with certain default values already filled in, and
	 * 2 NCP providers, NCP-A with the required 3 services and NCP-B with the
	 * required 2. The user can then add extra services on each provider if
	 * needed.
	 */
	private void initializeEmptyTSL(String isoCode, String countryname) {

		this.trustServiceList = TrustServiceListFactory.newInstance();
		TrustStatusListType listType = this.trustServiceList.getTrustStatusList();

		TSLSchemeInformationType schemeType = new TSLSchemeInformationType();
		schemeType.setTSLVersionIdentifier(new BigInteger(ValidatorUtil.TSL_VERSION_IDENTIFIER));
		schemeType.setTSLType(ValidatorUtil.TSL_TYPE);
		NonEmptyMultiLangURIListType infoURI = new NonEmptyMultiLangURIListType();
		List<NonEmptyMultiLangURIType> uriList = infoURI.getURI();
		NonEmptyMultiLangURIType uri = new NonEmptyMultiLangURIType();
		uri.setLang("");
		uri.setValue(ValidatorUtil.TSL_EPSOS_SECURITY_POLICY_DOC);
		uriList.add(uri);
		NonEmptyMultiLangURIType uri2 = new NonEmptyMultiLangURIType();
		uri2.setLang("");
		uri2.setValue(ValidatorUtil.TSL_EPSOS_FRAMEWORK_AGGREEMENT_DOC);
		uriList.add(uri2);
		schemeType.setSchemeInformationURI(infoURI);
		NonEmptyURIListType commRules = new NonEmptyURIListType();
		commRules.getURI().add(ValidatorUtil.TSL_ESPSOS_COMMUNITY_RULES);
		schemeType.setSchemeTypeCommunityRules(commRules);

		PolicyOrLegalnoticeType pol = new PolicyOrLegalnoticeType();
		pol.getTSLPolicy().add(uri2);
		schemeType.setPolicyOrLegalNotice(pol);

		schemeType.setHistoricalInformationPeriod(BigInteger.ZERO);
		try {
			schemeType.setListIssueDateTime(
					DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar) Calendar.getInstance()));
		} catch (Exception e1) {
		}

		listType.setId(ValidatorUtil.TSL_ID + isoCode);
		listType.setTSLTag(ValidatorUtil.TSL_TAG);
		listType.setSchemeInformation(schemeType);

		this.trustServiceList.setSchemeName(ValidatorUtil.TSL_SCHEME_NAME + countryname + "(" + isoCode + ")");
		this.trustServiceList.setStatusDeterminationApproach(ValidatorUtil.TSL_STATUS_DETERMINATION_APPROACH);
		this.trustServiceList.setSchemeTerritory(isoCode);

		// Also initialize 2 NCP providers with 3 and 2 services each
		TrustServiceProvider ncpA = new TrustServiceProvider("NCP-A", "NCP-A");

		TrustService vpnServA = initEmptyService(ComboBoxesUtil.SERVICE_IDENTIFIER_VPN_GATEWAY, "VPN Gateway");
		TrustService ncpServA = initEmptyService(ComboBoxesUtil.SERVICE_IDENTIFIER_NCP, "NCP Gateway");
		TrustService identServA = initEmptyService(ComboBoxesUtil.SERVICE_IDENTIFIER_PATIENT_IDENTIFICATION,
				"Patient Identification");
		ncpA.addTrustService(vpnServA);
		ncpA.addTrustService(ncpServA);
		ncpA.addTrustService(identServA);

		TrustServiceProvider ncpB = new TrustServiceProvider("NCP-B", "NCP-B");

		TrustService vpnServB = initEmptyService(ComboBoxesUtil.SERVICE_IDENTIFIER_VPN_GATEWAY, "VPN Gateway");
		TrustService ncpServB = initEmptyService(ComboBoxesUtil.SERVICE_IDENTIFIER_NCP, "NCP Gateway");
		ncpB.addTrustService(vpnServB);
		ncpB.addTrustService(ncpServB);

		this.trustServiceList.addTrustServiceProvider(ncpA);
		this.trustServiceList.addTrustServiceProvider(ncpB);
	}

	/**
	 * This utility method initializes and returns a new TrustService object
	 * using the given service type identifier and service name.
	 *
	 * @param identifier
	 *            the Service Type Identifier to use (a choice as given by
	 *            ComboBoxesUtil)
	 * @param name
	 *            the name for the Service to create
	 * @return
	 */
	private TrustService initEmptyService(String identifier, String name) {
		TSPServiceInformationType vpnInfoType = new TSPServiceInformationType();
		vpnInfoType.setServiceTypeIdentifier(identifier);
		InternationalNamesType vpnName = new InternationalNamesType();
		List<MultiLangNormStringType> vpnNameList = vpnName.getName();
		MultiLangNormStringType nameS = new MultiLangNormStringType();
		nameS.setLang(Locale.getDefault().getLanguage());
		nameS.setValue(name);
		vpnNameList.add(nameS);
		vpnInfoType.setServiceName(vpnName);
		try {
			vpnInfoType.setStatusStartingTime(
					DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar) Calendar.getInstance()));
		} catch (Exception e) {
		}
		TSPServiceType vpnServType = new TSPServiceType();

		vpnServType.setServiceInformation(vpnInfoType);

		TrustService result = new TrustService(vpnServType);
		return result;
	}

	/**
	 * This utility method initializes all the combo-boxes on the UI, based on
	 * the choices provided by ComboBoxesUtil (languages/service identifier
	 * types/service statuses)
	 */
	private void initCombos() {
		Vector<String> languageCodes = ComboBoxesUtil.LANGUAGE_CODES;

		DefaultComboBoxModel langModel1 = new DefaultComboBoxModel(languageCodes);
		language_OperatorName.setModel(langModel1);
		language_OperatorName.addItemListener(this);
		DefaultComboBoxModel langModel2 = new DefaultComboBoxModel(languageCodes);
		language_SchemeName.setModel(langModel2);
		language_SchemeName.addItemListener(this);
		DefaultComboBoxModel langModel3 = new DefaultComboBoxModel(languageCodes);
		language_OperatorAddress.setModel(langModel3);
		language_OperatorAddress.addItemListener(this);
		DefaultComboBoxModel langModel4 = new DefaultComboBoxModel(ComboBoxesUtil.COUNTRY_CODES);
		comboBox_territory.setModel(langModel4);

		// PROVIDER
		DefaultComboBoxModel langModel5 = new DefaultComboBoxModel(languageCodes);
		language_Provider_Address.setModel(langModel5);
		language_Provider_Address.addItemListener(this);
		DefaultComboBoxModel langModel6 = new DefaultComboBoxModel(languageCodes);
		language_Provider_Information.setModel(langModel6);
		language_Provider_Information.addItemListener(this);
		DefaultComboBoxModel langModel7 = new DefaultComboBoxModel(languageCodes);
		language_Provider_Name.setModel(langModel7);
		language_Provider_Name.addItemListener(this);

		// SERVICE
		DefaultComboBoxModel langModel8 = new DefaultComboBoxModel(languageCodes);
		language_Service_Name.setModel(langModel8);
		language_Service_Name.addItemListener(this);

		DefaultComboBoxModel serviceStatusModel = new DefaultComboBoxModel(ComboBoxesUtil.SERVICE_STATUS_CODES);
		this.combo_Service_Status.setModel(serviceStatusModel);

		DefaultComboBoxModel serviceIdentifierModel = new DefaultComboBoxModel(ComboBoxesUtil.SERVICE_IDENTIFIER_CODES);
		this.combo_ServiceTypeIdentifier.setModel(serviceIdentifierModel);
	}

	/**
	 * This method is used to show to the user the main TSL Envelope frame of
	 * the UI. It is called either when the user chooses "New" or "Open" from
	 * the menu bar, in which case it has to initialize the complete UI with
	 * values read from the current TSL and hence the "firstTime" flag is set to
	 * true, or when the user navigates through the TSL tree frame, choosing the
	 * main root node of the TSL Envelope, in which case it is called with the
	 * flag equal to false, as it just makes the envelope frame visible, hiding
	 * any other currently visible frame (ncp provider, service or signature).
	 *
	 * @param firstTime
	 */
	public void showTSLEnvelope(boolean firstTime) {
		readModelFields(firstTime);

		if (firstTime)
			currentTreeNode = (DefaultMutableTreeNode) this.jTree.getModel().getRoot();

		this.rightScrollPane.setViewportView(TSLEnvelopePanel);
		TSLEnvelopePanel.setVisible(true);
		TSLProviderPanel.setVisible(false);
		TSLServicePanel.setVisible(false);
		TSLSignaturePanel.setVisible(false);

		this.jMenuItem2.setEnabled(true);
		this.jMenuItem3.setEnabled(true);
		this.jMenuItem4.setEnabled(true);

		jTree.setVisible(true);
	}

	/**
	 * This method is used to show to the user the NCP Provider frame for the
	 * provider in question. It is called when the user navigates through the
	 * TSL tree frame, clicking on an NCP Provider node.
	 *
	 * @param provider
	 *            the provider object of which the information is to be shown in
	 *            the frame
	 */
	public void showTSLProvider(TrustServiceProvider provider) {
		emptyProviderFormFields();

		readModelFields(provider);

		this.rightScrollPane.setViewportView(TSLProviderPanel);
		TSLEnvelopePanel.setVisible(false);
		TSLProviderPanel.setVisible(true);
		TSLServicePanel.setVisible(false);
		TSLSignaturePanel.setVisible(false);
	}

	/**
	 * This method is used to show to the user the NCP Service frame for the
	 * service in question. It is called when the user navigates through the TSL
	 * tree frame, clicking on an service node.
	 *
	 * @param service
	 *            the service object of which the information is to be shown in
	 *            the frame
	 */
	public void showTSLService(TrustService service) {
		emptyServiceFormFields();

		readModelFields(service);

		this.rightScrollPane.setViewportView(TSLServicePanel);
		TSLEnvelopePanel.setVisible(false);
		TSLProviderPanel.setVisible(false);
		TSLServicePanel.setVisible(true);
		TSLSignaturePanel.setVisible(false);
	}

	/**
	 * This method is used to show to the user the TSL signature frame for the
	 * current TSL. It is called when the user navigates through the TSL tree
	 * frame, clicking on the signature node.
	 */
	public void showTSLSignature() {
		readModelSignature();

		this.rightScrollPane.setViewportView(TSLSignaturePanel);
		TSLEnvelopePanel.setVisible(false);
		TSLProviderPanel.setVisible(false);
		TSLServicePanel.setVisible(false);
		TSLSignaturePanel.setVisible(true);
	}

	/**
	 * This method is called when a new TSL or an existing TSL file is opened
	 * for the first time (as a result of the user choosing "New" or "Open" from
	 * the menubar, and it reads the complete TSL object's tree structure and
	 * draws it using a JTree component in the TSL tree frame of the UI.
	 */
	public void initTree() {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(this.trustServiceList);

		if (this.trustServiceList.getTrustServiceProviders() != null
				&& this.trustServiceList.getTrustServiceProviders().size() > 0) {
			for (TrustServiceProvider p : this.trustServiceList.getTrustServiceProviders()) {
				DefaultMutableTreeNode provNode = new DefaultMutableTreeNode(p);
				if (p.getTrustServices() != null) {
					for (TrustService s : p.getTrustServices()) {
						DefaultMutableTreeNode serviceNode = new DefaultMutableTreeNode(s);
						provNode.add(serviceNode);
					}
				}
				root.add(provNode);
			}
		}
		DefaultMutableTreeNode signatureNode = new DefaultMutableTreeNode("Signature");
		root.add(signatureNode);
		DefaultTreeModel treeModel = new DefaultTreeModel(root);
		jTree.setModel(treeModel);
	}

	/**
	 * This method empties all form fields of the UI. It is used when the user
	 * nagivates between different nodes of the TSL tree, to ensure no
	 * information from a previous NCP provider or Service remains on the screen
	 * when switching from one form to the next.
	 */
	public void emptyAllFormFields() {
		this.currentTreeNode = null;

		Locale locale = Locale.getDefault();
		String countryCode = locale.getCountry().toUpperCase();
		String languageCode = locale.getLanguage().toUpperCase();

		combo_ServiceTypeIdentifier.setSelectedIndex(0);
		combo_Service_Status.setSelectedIndex(0);

		this.language_OperatorAddress.setSelectedItem(languageCode);
		this.language_OperatorName.setSelectedItem(languageCode);
		this.language_SchemeName.setSelectedItem(languageCode);
		this.language_Provider_Address.setSelectedItem(languageCode);
		this.language_Provider_Information.setSelectedItem(languageCode);
		this.language_Provider_Name.setSelectedItem(languageCode);
		this.language_Service_Name.setSelectedItem(languageCode);
		this.comboBox_territory.setSelectedItem(countryCode);

		this.certificateIssuerName.setText("");
		this.certificateSerialNumber.setText("");
		this.certificateValidFrom.setText("");
		this.certificateValidUntil.setText("");
		this.certificateSubjectName.setText("");
		textField_DistributionPoint.setText("");
		textField_ID.setText("");
		textField_OperatorName.setText("");
		textField_Provider_CountryName.setText("");
		textField_Provider_ElectronicAddress1.setText("");
		textField_Provider_ElectronicAddress2.setText("");
		textField_Provider_ElectronicAddress3.setText("");
		textField_Provider_Information.setText("");
		textField_Provider_Locality.setText("");
		textField_Provider_PostCode.setText("");
		textField_Provider_StreetAddress.setText("");
		textField_SchemeName.setText("");
		textField_SequenceNumber.setText("");
		textField_Service_Name.setText("");
		textField_Service_StartingTime.setText("");
		textField_Service_SupplyPoint1.setText("");
		textField_Service_SupplyPoint2.setText("");
		textField_Service_SupplyPoint3.setText("");
		certificateList.setModel(new DefaultListModel());
		textField_countryName.setText("");
		textField_electronicAddress1.setText("");
		textField_electronicAddress2.setText("");
		textField_electronicAddress3.setText("");
		textField_listIssueDateTime.setText("");
		textField_locality.setText("");
		textField_nextUpdate.setText("");
		textField_postCode.setText("");
		textField_providerName.setText("");
		textField_streetAddress.setText("");
		textField_Signature_CanonicalizationMethod.setText("");
		textField_Signature_SignatureMethod.setText("");
		signatureIssuerName.setText("");
		signatureSerialNumber.setText("");
		signatureValidFrom.setText("");
		signatureValidUntil.setText("");
		signatureSubjectName.setText("");

		this.keyAlias.setText("");
		this.keyPassword.setText("");
		this.keyStorePassword.setText("");
	}

	/**
	 * This method empties all NCP Provider fields of the UI. It is used when
	 * the user nagivates between different nodes of the TSL tree, to ensure no
	 * information from a previous NCP provider remains on the screen when
	 * switching from one form to the next.
	 */
	private void emptyProviderFormFields() {
		Locale locale = Locale.getDefault();
		String languageCode = locale.getCountry().toUpperCase();
		this.language_Provider_Address.setSelectedItem(languageCode);
		this.language_Provider_Information.setSelectedItem(languageCode);
		this.language_Provider_Name.setSelectedItem(languageCode);

		textField_Provider_CountryName.setText("");
		textField_Provider_ElectronicAddress1.setText("");
		textField_Provider_ElectronicAddress2.setText("");
		textField_Provider_ElectronicAddress3.setText("");
		textField_Provider_Information.setText("");
		textField_Provider_Locality.setText("");
		textField_Provider_PostCode.setText("");
		textField_Provider_StreetAddress.setText("");
		textField_providerName.setText("");
	}

	/**
	 * This method empties all Service fields of the UI. It is used when the
	 * user nagivates between different nodes of the TSL tree, to ensure no
	 * information from a previous Service remains on the screen when switching
	 * from one form to the next.
	 */
	private void emptyServiceFormFields() {
		Locale locale = Locale.getDefault();
		String languageCode = locale.getCountry().toUpperCase();
		this.language_Service_Name.setSelectedItem(languageCode);

		combo_ServiceTypeIdentifier.setSelectedIndex(0);
		combo_Service_Status.setSelectedIndex(0);
		this.certificateIssuerName.setText("");
		this.certificateSerialNumber.setText("");
		this.certificateValidFrom.setText("");
		this.certificateValidUntil.setText("");
		this.certificateSubjectName.setText("");
		textField_Service_Name.setText("");
		textField_Service_StartingTime.setText("");
		textField_Service_SupplyPoint1.setText("");
		textField_Service_SupplyPoint2.setText("");
		textField_Service_SupplyPoint3.setText("");
		certificateList.setModel(new DefaultListModel());
	}

	/**
	 * This is the even handler for the JTree component, handling the user
	 * navigation from one TSL node to the next. Each time the user navigates
	 * away from a node, the information entered in that node's form is saved in
	 * the current object, and the information of the new node is drawn on the
	 * screen.
	 *
	 * @param e
	 */
	public void valueChanged(TreeSelectionEvent e) {
		DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree.getLastSelectedPathComponent();
		// save previous node
		if (currentTreeNode != null)
			writeModelFields(currentTreeNode);

		currentTreeNode = node;

		if (node == null)
			// Nothing is selected.
			return;

		Object nodeInfo = node.getUserObject();
		if (nodeInfo instanceof String && "Signature".equals(nodeInfo)) {
			// signature case
			showTSLSignature();
		} else if (nodeInfo instanceof TrustServiceList) {
			// envelope case
			showTSLEnvelope(false);
		} else if (nodeInfo instanceof TrustServiceProvider) {
			// provider case
			showTSLProvider((TrustServiceProvider) nodeInfo);
		} else if (nodeInfo instanceof TrustService) {
			// service case
			showTSLService((TrustService) nodeInfo);
		}
	}

	/**
	 * This is the event handler used by all language combo boxes in the UI, to
	 * switch between, add, and edit different language versions of the
	 * information like names, addresses, etc
	 *
	 * @param e
	 */
	public void itemStateChanged(ItemEvent e) {
		Object source = e.getSource();
		Object item = e.getItem();
		if (currentTreeNode != null && source instanceof JComboBox && item instanceof String) {
			JComboBox combo = (JComboBox) source;
			String option = (String) item;
			Locale locale = Locale.getDefault();
			locale = ComboBoxesUtil.getLocaleFromLanguageCode(option);

			if (e.getStateChange() == ItemEvent.DESELECTED) {
				// in case of DE-SELECTION, write previous value to model
				if (combo.getName().equals("language_OperatorAddress")) {
					PostalAddressType address = this.trustServiceList.getSchemeOperatorPostalAddress(locale);
					if (address != null) {
						address.setCountryName(this.textField_countryName.getText());
						address.setLocality(this.textField_locality.getText());
						address.setPostalCode(this.textField_postCode.getText());
						address.setStreetAddress(this.textField_streetAddress.getText());
					} else if (ValidatorUtil.isNotNull(this.textField_countryName)
							|| ValidatorUtil.isNotNull(this.textField_locality)
							|| ValidatorUtil.isNotNull(this.textField_postCode)
							|| ValidatorUtil.isNotNull(this.textField_streetAddress)) {
						address = new PostalAddressType();
						address.setCountryName(this.textField_countryName.getText());
						address.setLocality(this.textField_locality.getText());
						address.setPostalCode(this.textField_postCode.getText());
						address.setStreetAddress(this.textField_streetAddress.getText());
						this.trustServiceList.setSchemeOperatorPostalAddress(address, locale);
					}
				} else if (combo.getName().equals("language_SchemeName")) {
					this.trustServiceList.setSchemeName(this.textField_SchemeName.getText(), locale);
				} else if (combo.getName().equals("language_OperatorName")) {
					this.trustServiceList.setSchemeOperatorName(this.textField_OperatorName.getText(), locale);
				} else if (combo.getName().equals("language_Provider_Address")) {
					if (currentTreeNode.getUserObject() instanceof TrustServiceProvider) {
						TrustServiceProvider provider = (TrustServiceProvider) currentTreeNode.getUserObject();
						PostalAddressType address = provider.getPostalAddress(locale);
						if (address != null) {
							address.setCountryName(this.textField_Provider_CountryName.getText());
							address.setLocality(this.textField_Provider_Locality.getText());
							address.setPostalCode(this.textField_Provider_PostCode.getText());
							address.setStreetAddress(this.textField_Provider_StreetAddress.getText());
						} else if (ValidatorUtil.isNotNull(this.textField_Provider_CountryName)
								|| ValidatorUtil.isNotNull(this.textField_Provider_Locality)
								|| ValidatorUtil.isNotNull(this.textField_Provider_PostCode)
								|| ValidatorUtil.isNotNull(this.textField_Provider_StreetAddress)) {

							String countryName = this.textField_Provider_CountryName.getText();
							String locality = this.textField_Provider_Locality.getText();
							String postalCode = this.textField_Provider_PostCode.getText();
							String streetAddress = this.textField_Provider_StreetAddress.getText();

							provider.addPostalAddress(locale, streetAddress, locality, "", postalCode, countryName);
						}
					}
				} else if (combo.getName().equals("language_Provider_Information")) {
					if (currentTreeNode.getUserObject() instanceof TrustServiceProvider) {
						TrustServiceProvider provider = (TrustServiceProvider) currentTreeNode.getUserObject();
						if (ValidatorUtil.isNotNull(this.textField_Provider_Information)) {
							if (provider.getInformationUris(locale) != null
									&& provider.getInformationUris(locale).size() > 0) {
								// replace the previous one with this one
								NonEmptyMultiLangURIListType tspInformationURI = provider.getTSP().getTSPInformation()
										.getTSPInformationURI();
								List<NonEmptyMultiLangURIType> uris = tspInformationURI.getURI();
								for (NonEmptyMultiLangURIType uri : uris) {
									if (uri.getLang().equalsIgnoreCase(locale.getLanguage())) {
										uri.setValue(this.textField_Provider_Information.getText());
										break;
									}
								}
							} else {
								provider.addInformationUri(locale, this.textField_Provider_Information.getText());
							}
						}
					}
				} else if (combo.getName().equals("language_Provider_Name")) {
					if (currentTreeNode.getUserObject() instanceof TrustServiceProvider) {
						TrustServiceProvider provider = (TrustServiceProvider) currentTreeNode.getUserObject();
						String providerName = this.textField_providerName.getText();
						if (ValidatorUtil.isNotNull(providerName)) {
							InternationalNamesType tspNames = provider.getTSP().getTSPInformation().getTSPName();
							if (tspNames == null) {
								tspNames = objectFactory.createInternationalNamesType();
							}
							TrustServiceListUtils.setValue(providerName, locale, tspNames);
							provider.getTSP().getTSPInformation().setTSPName(tspNames);
						}
					}
				} else if (combo.getName().equals("language_Service_Name")) {
					if (currentTreeNode.getUserObject() instanceof TrustService) {
						TrustService service = (TrustService) currentTreeNode.getUserObject();

						String serviceName = this.textField_Service_Name.getText();
						if (ValidatorUtil.isNotNull(serviceName)) {
							InternationalNamesType tspNames = service.getTSPService().getServiceInformation()
									.getServiceName();
							if (tspNames == null) {
								tspNames = objectFactory.createInternationalNamesType();
							}
							TrustServiceListUtils.setValue(serviceName, locale, tspNames);
							service.getTSPService().getServiceInformation().setServiceName(tspNames);
						}
					}
				}
			} else {
				// in case of SELECTION, read new value from model or set fields
				// to empty to enter a new value if one was not there
				if (combo.getName().equals("language_OperatorAddress")) {
					PostalAddressType address = this.trustServiceList.getSchemeOperatorPostalAddress(locale);
					if (address != null) {
						this.textField_countryName.setText(address.getCountryName());
						this.textField_locality.setText(address.getLocality());
						this.textField_postCode.setText(address.getPostalCode());
						this.textField_streetAddress.setText(address.getStreetAddress());
					} else {
						this.textField_countryName.setText("");
						this.textField_locality.setText("");
						this.textField_postCode.setText("");
						this.textField_streetAddress.setText("");
					}
				} else if (combo.getName().equals("language_SchemeName")) {
					this.textField_SchemeName.setText(this.trustServiceList.getSchemeName(locale));
				} else if (combo.getName().equals("language_OperatorName")) {
					this.textField_OperatorName.setText(this.trustServiceList.getSchemeOperatorName(locale));
				} else if (combo.getName().equals("language_Provider_Address")) {
					if (currentTreeNode.getUserObject() instanceof TrustServiceProvider) {
						TrustServiceProvider provider = (TrustServiceProvider) currentTreeNode.getUserObject();
						PostalAddressType address = provider.getPostalAddress(locale);
						if (address != null) {
							this.textField_Provider_CountryName.setText(address.getCountryName());
							this.textField_Provider_Locality.setText(address.getLocality());
							this.textField_Provider_PostCode.setText(address.getPostalCode());
							this.textField_Provider_StreetAddress.setText(address.getStreetAddress());
						} else {
							this.textField_Provider_CountryName.setText("");
							this.textField_Provider_Locality.setText("");
							this.textField_Provider_PostCode.setText("");
							this.textField_Provider_StreetAddress.setText("");
						}
					}
				} else if (combo.getName().equals("language_Provider_Information")) {
					if (currentTreeNode.getUserObject() instanceof TrustServiceProvider) {
						TrustServiceProvider provider = (TrustServiceProvider) currentTreeNode.getUserObject();
						List<String> uris = provider.getInformationUris(locale);
						if (uris != null && uris.size() > 0) {
							this.textField_Provider_Information.setText(uris.get(0));
						} else
							this.textField_Provider_Information.setText("");
					}
				} else if (combo.getName().equals("language_Provider_Name")) {
					if (currentTreeNode.getUserObject() instanceof TrustServiceProvider) {
						TrustServiceProvider provider = (TrustServiceProvider) currentTreeNode.getUserObject();
						String providerName = provider.getName(locale);
						if (ValidatorUtil.isNotNull(providerName)) {
							this.textField_providerName.setText(providerName);
						} else
							this.textField_providerName.setText("");
					}
				} else if (combo.getName().equals("language_Service_Name")) {
					if (currentTreeNode.getUserObject() instanceof TrustService) {
						TrustService service = (TrustService) currentTreeNode.getUserObject();
						String serviceName = service.getName(locale);
						this.textField_Service_Name.setText(serviceName);
					}
				}
			}
		}
	}

	/**
	 * Mouse handler, left empty, only the mouseReleased is needed, in order to
	 * show the popup menu for the tree
	 *
	 * @param e
	 */
	public void mouseClicked(MouseEvent e) {
	}

	/**
	 * Mouse handler, left empty, only the mouseReleased is needed, in order to
	 * show the popup menu for the tree
	 *
	 * @param e
	 */
	public void mousePressed(MouseEvent e) {
		if (e.isPopupTrigger()) {
			popupTriggered(e); // checked here for Linux platforms
		}
	}

	/**
	 * Mouse handler, the mouseReleased is needed, in order to show the popup
	 * menu for the tree, calculating its options based on the currently
	 * selected node/ncp provider/service, as not all options are available
	 * everywhere on the TSL tree, according to the EPSOS specifications.
	 *
	 * @param e
	 */
	public void mouseReleased(MouseEvent e) {
		if (e.isPopupTrigger()) {
			popupTriggered(e); // checked here for Windows platforms
		}
	}

	private void popupTriggered(MouseEvent e) {
		int x = e.getX();
		int y = e.getY();
		this.currentPopupSelectedTreePath = jTree.getPathForLocation(x, y);
		if (this.currentPopupSelectedTreePath != null) {
			DefaultMutableTreeNode node = (DefaultMutableTreeNode) this.currentPopupSelectedTreePath
					.getLastPathComponent();
			if (!node.isRoot() && !(node.getUserObject() instanceof String)) // root
																				// or
																				// signature
																				// case
			{
				treePopupMenu.removeAll();

				TrustServiceProvider provider = null;
				if (node.getUserObject() instanceof TrustServiceProvider) {
					provider = (TrustServiceProvider) node.getUserObject();
				} else if (node.getUserObject() instanceof TrustService) {
					provider = (TrustServiceProvider) ((DefaultMutableTreeNode) node.getParent()).getUserObject();
				}

				Vector<String> serviceChoices = new Vector<String>();
				serviceChoices.addAll(ComboBoxesUtil.SERVICE_IDENTIFIER_CODES);

				try {
					List<TSPServiceType> oldServices = provider.getTSP().getTSPServices().getTSPService();
					if (oldServices != null) {
						for (TSPServiceType s : oldServices) {
							serviceChoices.remove(s.getServiceInformation().getServiceTypeIdentifier());
						}
					}

				} catch (Exception e1) {
					LOGGER.error("Exception: " + e1.getMessage());
				}
				if (serviceChoices != null || !serviceChoices.isEmpty()) {
					JMenu addServiceSubMenu = new JMenu("Add Service...");
					for (final String s : serviceChoices) {
						JMenuItem treeAddNodeItem = new JMenuItem();
						treeAddNodeItem.setAction(new AbstractAction() {
							public void actionPerformed(ActionEvent e) {
								addService(s);
							}
						});
						treeAddNodeItem.setText(s);
						treeAddNodeItem.setName("treeAddNodeItem");
						addServiceSubMenu.add(treeAddNodeItem);
					}
					treePopupMenu.add(addServiceSubMenu);
				}

				// delete only possible on a specific service
				if (node.getUserObject() instanceof TrustService) {
					JMenuItem treeDeleteNodeItem = new JMenuItem();
					javax.swing.ActionMap actionMap = org.jdesktop.application.Application
							.getInstance(epsos.ccd.gnomon.tsleditor.TslEditor.class).getContext()
							.getActionMap(TslView.class, this);
					treeDeleteNodeItem.setAction(actionMap.get("deleteNode"));
					treeDeleteNodeItem.setText("Delete Service");
					treeDeleteNodeItem.setName("treeDeleteNodeItem");
					treePopupMenu.add(treeDeleteNodeItem);
				}

				this.treePopupMenu.show(this.jTree, x, y);
			}
		}
	}

	/**
	 * Mouse handler, left empty, only the mouseReleased is needed, in order to
	 * show the popup menu for the tree
	 *
	 * @param e
	 */
	public void mouseEntered(MouseEvent e) {
	}

	/**
	 * Mouse handler, left empty, only the mouseReleased is needed, in order to
	 * show the popup menu for the tree
	 *
	 * @param e
	 */
	public void mouseExited(MouseEvent e) {
	}

	/**
	 * This method is called every time the UI needs to refresh the currently
	 * displayed TSL envelope information. The information is read from the
	 * current TSL trustServiceList object kept by the application. If this is
	 * read for the "first time" (i.e. after a user chose "new" or "open" from
	 * the menubar) then also the JTree component is initialized with the TSL
	 * tree.
	 *
	 * @param firstTime
	 */
	private void readModelFields(boolean firstTime) {

		if (this.trustServiceList != null) {
			// also read the values into the text boxes
			TrustStatusListType listType = this.trustServiceList.getTrustStatusList();
			this.textField_ID.setText(listType.getId());

			Locale defaultLocale = Locale.getDefault();
			if (firstTime) {
				initTree();

				String countryCode = defaultLocale.getCountry().toUpperCase();
				String languageCode = defaultLocale.getLanguage().toUpperCase();

				this.language_OperatorName.setSelectedItem(languageCode);
				this.language_SchemeName.setSelectedItem(languageCode);
				this.language_OperatorAddress.setSelectedItem(languageCode);
				this.language_Provider_Address.setSelectedItem(languageCode);
				this.language_Provider_Information.setSelectedItem(languageCode);
				this.language_Provider_Name.setSelectedItem(languageCode);
				this.language_Service_Name.setSelectedItem(languageCode);
				this.comboBox_territory.setSelectedItem(countryCode);
			}

			this.textField_SequenceNumber.setText(this.trustServiceList.getSequenceNumber() != null
					? this.trustServiceList.getSequenceNumber().toString() : "");

			String langCode = this.language_SchemeName.getSelectedItem().toString();
			defaultLocale = ComboBoxesUtil.getLocaleFromLanguageCode(langCode);
			this.textField_SchemeName.setText(this.trustServiceList.getSchemeName(defaultLocale));

			langCode = this.language_OperatorName.getSelectedItem().toString();
			defaultLocale = ComboBoxesUtil.getLocaleFromLanguageCode(langCode);
			this.textField_OperatorName.setText(this.trustServiceList.getSchemeOperatorName(defaultLocale));

			langCode = this.language_OperatorAddress.getSelectedItem().toString();
			defaultLocale = ComboBoxesUtil.getLocaleFromLanguageCode(langCode);
			PostalAddressType address = this.trustServiceList.getSchemeOperatorPostalAddress(defaultLocale);
			if (address != null) {
				this.textField_countryName.setText(address.getCountryName());
				this.textField_locality.setText(address.getLocality());
				this.textField_postCode.setText(address.getPostalCode());
				this.textField_streetAddress.setText(address.getStreetAddress());
			}

			this.textField_electronicAddress1.setText("");
			this.textField_electronicAddress2.setText("");
			this.textField_electronicAddress3.setText("");
			List<String> addresses = this.trustServiceList.getSchemeOperatorElectronicAddresses();
			if (addresses != null && addresses.size() > 0) {
				for (int i = 0; i < addresses.size() && i < 3; i++) {
					if (i == 0)
						this.textField_electronicAddress1.setText(addresses.get(i));
					else if (i == 1)
						this.textField_electronicAddress2.setText(addresses.get(i));
					else if (i == 2)
						this.textField_electronicAddress3.setText(addresses.get(i));
				}
			}

			if (this.trustServiceList.getSchemeTerritory() != null)
				this.comboBox_territory.setSelectedItem(this.trustServiceList.getSchemeTerritory());

			if (this.trustServiceList.getListIssueDateTime() != null) {
				this.textField_listIssueDateTime
						.setText(dateTimeFormatter.format(this.trustServiceList.getListIssueDateTime().toDate()));
			}

			if (this.trustServiceList.getNextUpdate() != null) {
				this.textField_nextUpdate
						.setText(dateTimeFormatter.format(this.trustServiceList.getNextUpdate().toDate()));
			}

			if (listType.getSchemeInformation().getDistributionPoints() != null
					&& listType.getSchemeInformation().getDistributionPoints().getURI() != null
					&& listType.getSchemeInformation().getDistributionPoints().getURI().size() > 0) {
				this.textField_DistributionPoint
						.setText(listType.getSchemeInformation().getDistributionPoints().getURI().get(0));
			}
		}
	}

	/**
	 * This method is called every time the UI needs to refresh the currently
	 * displayed TSL signature information. The information is read from the
	 * current TSL trustServiceList object kept by the application.
	 */
	private void readModelSignature() {
		SignatureType sig = this.trustServiceList.getTrustStatusList().getSignature();
		if (sig != null) {
			KeyInfoType keyInfo = sig.getKeyInfo();
			List<Object> keyObjects = keyInfo.getContent();
			if (keyObjects != null && keyObjects.size() > 0) {
				for (Object obj : keyObjects) {
					if (obj instanceof JAXBElement) {
						JAXBElement el = (JAXBElement) obj;
						if (el.getValue() instanceof X509DataType) {
							try {
								X509DataType x509 = (X509DataType) el.getValue();
								byte[] cert = (byte[]) ((JAXBElement) x509
										.getX509IssuerSerialOrX509SKIOrX509SubjectName().get(0)).getValue();
								if (cert != null && cert.length > 0) {
									X509Certificate certificate = (X509Certificate) certificateFactory
											.generateCertificate(new ByteArrayInputStream(cert));
									if (certificate != null) {
										this.signatureIssuerName
												.setText(certificate.getIssuerX500Principal().getName());
										this.signatureSerialNumber.setText("" + certificate.getSerialNumber());
										this.signatureValidFrom.setText("" + certificate.getNotBefore());
										this.signatureValidUntil.setText("" + certificate.getNotAfter());
										this.signatureSubjectName
												.setText(certificate.getSubjectX500Principal().getName());
									}
								}
							} catch (Exception e) {
							}
						}
					}
				}
			}

			SignedInfoType signedInfo = sig.getSignedInfo();
			CanonicalizationMethodType canonType = signedInfo.getCanonicalizationMethod();
			String canonAlgor = canonType.getAlgorithm();
			this.textField_Signature_CanonicalizationMethod.setText(canonAlgor);

			SignatureMethodType sigType = signedInfo.getSignatureMethod();
			String sigAlgor = sigType.getAlgorithm();
			this.textField_Signature_SignatureMethod.setText(sigAlgor);
		} else {
			textField_Signature_CanonicalizationMethod.setText("");
			textField_Signature_SignatureMethod.setText("");
			this.signatureIssuerName.setText("");
			this.signatureSerialNumber.setText("");
			this.signatureValidFrom.setText("");
			this.signatureValidUntil.setText("");
			this.signatureSubjectName.setText("");

		}

	}

	/**
	 * This method is called every time the UI needs to refresh the currently
	 * displayed TSL NCP Provider information. The information is read from the
	 * currently selected TrustServiceProvider object kept by the application
	 * and passed to this method
	 *
	 * @param provider
	 *            the TrustServiceProvider object to read the information from
	 */
	private void readModelFields(TrustServiceProvider provider) {
		if (provider == null)
			return;

		Locale locale = Locale.getDefault();
		String nameCountryCode = this.language_Provider_Name.getSelectedItem().toString();
		locale = ComboBoxesUtil.getLocaleFromLanguageCode(nameCountryCode);
		String providerName = provider.getName(locale);
		if (ValidatorUtil.isNotNull(providerName))
			this.textField_providerName.setText(providerName);

		String addressCountryCode = this.language_Provider_Address.getSelectedItem().toString();
		locale = ComboBoxesUtil.getLocaleFromLanguageCode(addressCountryCode);
		PostalAddressType address = provider.getPostalAddress(locale);
		if (address != null) {
			this.textField_Provider_CountryName.setText(address.getCountryName());
			this.textField_Provider_Locality.setText(address.getLocality());
			this.textField_Provider_PostCode.setText(address.getPostalCode());
			this.textField_Provider_StreetAddress.setText(address.getStreetAddress());
		}

		String uriCountryCode = this.language_Provider_Information.getSelectedItem().toString();
		locale = ComboBoxesUtil.getLocaleFromLanguageCode(uriCountryCode);
		List<String> uris = provider.getInformationUris(locale);
		if (uris != null && uris.size() > 0) {
			this.textField_Provider_Information.setText(uris.get(0));
		}

		this.textField_Provider_ElectronicAddress1.setText("");
		this.textField_Provider_ElectronicAddress2.setText("");
		this.textField_Provider_ElectronicAddress3.setText("");
		List<String> addresses = provider.getElectronicAddress();
		if (addresses != null && addresses.size() > 0) {
			for (int i = 0; i < addresses.size() && i < 3; i++) {
				if (i == 0)
					this.textField_Provider_ElectronicAddress1.setText(addresses.get(i));
				else if (i == 1)
					this.textField_Provider_ElectronicAddress2.setText(addresses.get(i));
				else if (i == 2)
					this.textField_Provider_ElectronicAddress3.setText(addresses.get(i));
			}
		}

	}

	/**
	 *
	 * This method is called every time the UI needs to refresh the currently
	 * displayed Service information. The information is read from the currently
	 * selected TSL TrustService object kept by the application and passed to
	 * this method as an argument.
	 *
	 * @param service
	 *            the TrustService object to read the information from
	 */
	private void readModelFields(TrustService service) {
		if (service == null || service.getType() == null)
			return;

		this.combo_ServiceTypeIdentifier.setSelectedItem(service.getType().trim());

		Locale locale = Locale.getDefault();
		String nameCountryCode = this.language_Service_Name.getSelectedItem().toString();
		locale = ComboBoxesUtil.getLocaleFromLanguageCode(nameCountryCode);
		String serviceName = service.getName(locale);
		this.textField_Service_Name.setText(serviceName);

		if (ValidatorUtil.isNotNull(service.getStatus()))
			this.combo_Service_Status.setSelectedItem(service.getStatus().trim());

		DateTime dateTime = service.getStatusStartingTime();
		if (dateTime != null)
			this.textField_Service_StartingTime.setText(this.dateTimeFormatter.format(dateTime.toDate()));
		else
			this.textField_Service_StartingTime.setText(this.dateTimeFormatter.format(new Date()));

		if (service.getTSPService() != null && service.getTSPService().getServiceInformation() != null) {
			ServiceSupplyPointsType suppl = service.getTSPService().getServiceInformation().getServiceSupplyPoints();
			if (suppl != null) {
				List<String> points = suppl.getServiceSupplyPoint();
				if (points != null) {
					for (int i = 0; i < points.size() && i < 3; i++) {
						if (i == 0)
							this.textField_Service_SupplyPoint1.setText(points.get(i));
						else if (i == 1)
							this.textField_Service_SupplyPoint2.setText(points.get(i));
						else if (i == 2)
							this.textField_Service_SupplyPoint3.setText(points.get(i));
					}
				}
			}

			// Also read certificates if any available
			DigitalIdentityListType idList = service.getTSPService().getServiceInformation()
					.getServiceDigitalIdentity();
			if (idList != null) {
				List<DigitalIdentityType> ids = idList.getDigitalId();
				if (ids != null) {
					Vector<String> subjects = new Vector<String>();
					for (DigitalIdentityType digId : ids) {
						byte[] x509CertificateData = digId.getX509Certificate();
						if (x509CertificateData != null) {
							try {
								X509Certificate certificate = (X509Certificate) certificateFactory
										.generateCertificate(new ByteArrayInputStream(x509CertificateData));
								if (certificate != null) {
									String certSubjectName = ValidatorUtil.getUniqueSubjectLine(certificate);
									subjects.add(certSubjectName);
								}
							} catch (CertificateException e) {
								LOGGER.error("CertificateException: " + e.getMessage());
							}
						}
					}
					if (subjects.size() > 0) {
						DefaultListModel listModel = new DefaultListModel();
						for (String s : subjects) {
							listModel.addElement(s);
						}
						this.certificateList.setModel(listModel);
					}
				}
			}
		}
	}

	/**
	 * This method is called when the user chooses the "Save" option from the
	 * menu bar. It performs a complete validation of the currently built TSL
	 * object and if no errors are found it returns true. If errors are found,
	 * it returns false, and shows an error window to the user with the list of
	 * all validation errors found, as built by the @link ValidatorUtil class
	 *
	 * @return true if validation is passed without errors, false otherwise
	 */
	public boolean validate() {
		StringBuilder errorString = new StringBuilder(1000);

		if (this.trustServiceList == null)
			ValidatorUtil.appendErrorMessage(errorString, "No information available for saving");
		else {
			// validate envelope
			ValidatorUtil.validateEnvelope(this.trustServiceList, errorString);

			List<TrustServiceProvider> providers = this.trustServiceList.getTrustServiceProviders();
			if (providers != null) {
				boolean ncpAFound = false;
				boolean ncpBFound = false;
				for (TrustServiceProvider p : providers) {
					if (p.getTradeName() != null && p.getTradeName().equals("NCP-A"))
						ncpAFound = true;
					if (p.getTradeName() != null && p.getTradeName().equals("NCP-B"))
						ncpBFound = true;
					// validate each NCP
					ValidatorUtil.validateNCP(p, errorString);
				}
				if (!ncpAFound || !ncpBFound) {
					ValidatorUtil.appendErrorMessage(errorString,
							"Exactly 2 Trust Service Providers must be present, NCP-A and NCP-B");
				}
			}

			// validate signature
			ValidatorUtil.validateSignature(this.trustServiceList, errorString);
		}

		if (errorString.length() > 0) {
			javax.swing.JTextArea errorArea = new javax.swing.JTextArea();
			java.awt.Font f = errorArea.getFont();
			java.awt.Font newFont = new java.awt.Font(f.getName(), f.getStyle(), 12);
			errorArea.setFont(newFont);
			errorArea.setText(
					"Are you sure you want to save and/or upload this file? The following validation Errors were found\n\n"
							+ errorString);
			javax.swing.JScrollPane errorScrollPane = new javax.swing.JScrollPane();
			errorScrollPane.setPreferredSize(new java.awt.Dimension(700, 400));
			errorScrollPane.setMinimumSize(new java.awt.Dimension(700, 400));
			errorScrollPane.setMaximumSize(new java.awt.Dimension(700, 400));
			errorScrollPane.setViewportView(errorArea);

			// JOptionPane.showMessageDialog(this.jSplitPane1, "Your file could
			// not be saved!\n\n"+errorString, "Validation Errors",
			// JOptionPane.ERROR_MESSAGE);
			int optionChosen = JOptionPane.showConfirmDialog(this.jSplitPane1, errorScrollPane, "Validation Errors!",
					JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
			if (optionChosen == 0)
				return true;
			else
				return false;
		} else
			return true;
	}

	/**
	 * This method is called every time the user nagivates away from a currently
	 * selected tree node. Depending on the type of Tree node, the
	 * corresponding @link writeModelFields method is called (for TSL Envelope,
	 * NCP Provider, Service, or TSL Signature nodes)
	 *
	 * @param node
	 *            the node the user navigated away from, the field information
	 *            of which needs to be stored in the currently built TSL model
	 */
	private void writeModelFields(DefaultMutableTreeNode node) {
		if (node.isRoot())
			writeModelFields();
		else if (node.getUserObject() instanceof TrustServiceProvider)
			writeModelFields((TrustServiceProvider) node.getUserObject());
		else if (node.getUserObject() instanceof TrustService)
			writeModelFields((TrustService) node.getUserObject());

		((DefaultTreeModel) this.jTree.getModel()).nodeChanged(node);
	}

	/**
	 * This method is used to save the provider UI fields information to the
	 * given TrustServiceProvider object. The information is read from the UI
	 * fields and copied over to the currently built TSL model
	 *
	 * @param provider
	 *            the TrustServiceProvider object to write the information from
	 *            the UI to
	 */
	private void writeModelFields(TrustServiceProvider provider) {
		Locale locale = Locale.getDefault();
		String nameCountryCode = (String) this.language_Provider_Name.getSelectedItem();
		locale = ComboBoxesUtil.getLocaleFromLanguageCode(nameCountryCode);

		String providerName = this.textField_providerName.getText();
		if (ValidatorUtil.isNotNull(providerName)) {
			InternationalNamesType tspNames = provider.getTSP().getTSPInformation().getTSPName();
			if (tspNames == null) {
				tspNames = objectFactory.createInternationalNamesType();
			}
			TrustServiceListUtils.setValue(providerName, locale, tspNames);
			provider.getTSP().getTSPInformation().setTSPName(tspNames);
		}

		nameCountryCode = (String) this.language_Provider_Address.getSelectedItem();
		locale = ComboBoxesUtil.getLocaleFromLanguageCode(nameCountryCode);
		PostalAddressType address = provider.getPostalAddress(locale);
		if (address != null) {
			address.setCountryName(this.textField_Provider_CountryName.getText());
			address.setLocality(this.textField_Provider_Locality.getText());
			address.setPostalCode(this.textField_Provider_PostCode.getText());
			address.setStreetAddress(this.textField_Provider_StreetAddress.getText());
		} else if (ValidatorUtil.isNotNull(this.textField_Provider_CountryName)
				|| ValidatorUtil.isNotNull(this.textField_Provider_Locality)
				|| ValidatorUtil.isNotNull(this.textField_Provider_PostCode)
				|| ValidatorUtil.isNotNull(this.textField_Provider_StreetAddress)) {

			String countryName = this.textField_Provider_CountryName.getText();
			String locality = this.textField_Provider_Locality.getText();
			String postalCode = this.textField_Provider_PostCode.getText();
			String streetAddress = this.textField_Provider_StreetAddress.getText();

			provider.addPostalAddress(locale, streetAddress, locality, "", postalCode, countryName);
		}

		List<String> addresses = new ArrayList<String>();
		if (ValidatorUtil.isNotNull(this.textField_Provider_ElectronicAddress1)) {
			addresses.add(this.textField_Provider_ElectronicAddress1.getText());
		}
		if (ValidatorUtil.isNotNull(this.textField_Provider_ElectronicAddress2)) {
			addresses.add(this.textField_Provider_ElectronicAddress2.getText());
		}
		if (ValidatorUtil.isNotNull(this.textField_Provider_ElectronicAddress3))
			addresses.add(this.textField_Provider_ElectronicAddress3.getText());

		// ensure addresses is not null, then add all these ones, by deleting
		// previous ones first
		if (provider.getTSP().getTSPInformation().getTSPAddress() == null)
			provider.getTSP().getTSPInformation().setTSPAddress(objectFactory.createAddressType());
		if (provider.getTSP().getTSPInformation().getTSPAddress().getElectronicAddress() == null)
			provider.getTSP().getTSPInformation().getTSPAddress()
					.setElectronicAddress(objectFactory.createElectronicAddressType());
		ElectronicAddressType addrType = provider.getTSP().getTSPInformation().getTSPAddress().getElectronicAddress();
		List<String> uriList = addrType.getURI();
		uriList.clear();
		uriList.addAll(addresses);

		nameCountryCode = (String) this.language_Provider_Information.getSelectedItem();
		locale = ComboBoxesUtil.getLocaleFromLanguageCode(nameCountryCode);

		if (ValidatorUtil.isNotNull(this.textField_Provider_Information)) {
			if (provider.getInformationUris(locale) != null && provider.getInformationUris(locale).size() > 0) {
				// replace the previous one with this one
				NonEmptyMultiLangURIListType tspInformationURI = provider.getTSP().getTSPInformation()
						.getTSPInformationURI();
				List<NonEmptyMultiLangURIType> uris = tspInformationURI.getURI();
				for (NonEmptyMultiLangURIType uri : uris) {
					if (uri.getLang().equalsIgnoreCase(locale.getLanguage())) {
						uri.setValue(this.textField_Provider_Information.getText());
						break;
					}
				}

			} else
				provider.addInformationUri(locale, this.textField_Provider_Information.getText());
		}
	}

	/**
	 * This method is used to save the service UI fields information to the
	 * given TrustService object. The information is read from the UI fields and
	 * copied over to the currently built TSL model
	 *
	 * @param service
	 *            the TrustService object to write the information from the UI
	 *            to
	 */
	private void writeModelFields(TrustService service) {
		TSPServiceInformationType serviceType = service.getTSPService().getServiceInformation();
		serviceType.setServiceTypeIdentifier((String) this.combo_ServiceTypeIdentifier.getSelectedItem());
		serviceType.setServiceStatus((String) this.combo_Service_Status.getSelectedItem());

		Locale locale = Locale.getDefault();
		String nameCountryCode = (String) this.language_Service_Name.getSelectedItem();
		locale = ComboBoxesUtil.getLocaleFromLanguageCode(nameCountryCode);

		String serviceName = this.textField_Service_Name.getText();
		if (ValidatorUtil.isNotNull(serviceName)) {
			InternationalNamesType tspNames = serviceType.getServiceName();
			if (tspNames == null) {
				tspNames = objectFactory.createInternationalNamesType();
			}
			TrustServiceListUtils.setValue(serviceName, locale, tspNames);
			serviceType.setServiceName(tspNames);
		}

		if (ValidatorUtil.isNotNull(this.textField_Service_StartingTime)) {
			Date date = null;
			try {
				date = dateTimeFormatter.parse(this.textField_Service_StartingTime.getText());
			} catch (Exception e) {
				date = new Date();
			}

			GregorianCalendar cal = (GregorianCalendar) GregorianCalendar.getInstance();
			cal.setTime(date);
			try {
				serviceType.setStatusStartingTime(DatatypeFactory.newInstance().newXMLGregorianCalendar(cal));
			} catch (Exception dateTime) {
			}
		}

		ServiceSupplyPointsType suppl = serviceType.getServiceSupplyPoints();
		List<String> supplyPoints = null;
		if (suppl == null) {
			suppl = objectFactory.createServiceSupplyPointsType();
		}
		supplyPoints = suppl.getServiceSupplyPoint();
		supplyPoints.clear();
		if (ValidatorUtil.isNotNull(this.textField_Service_SupplyPoint1))
			supplyPoints.add(this.textField_Service_SupplyPoint1.getText());
		if (ValidatorUtil.isNotNull(this.textField_Service_SupplyPoint2))
			supplyPoints.add(this.textField_Service_SupplyPoint2.getText());
		if (ValidatorUtil.isNotNull(this.textField_Service_SupplyPoint3))
			supplyPoints.add(this.textField_Service_SupplyPoint3.getText());
		serviceType.setServiceSupplyPoints(suppl);
	}

	/**
	 * This method is used to save the TSL Envelope UI fields information to the
	 * currently built TSL model
	 */
	public void writeModelFields() {
		if (this.trustServiceList != null) {
			// also read the values into the text boxes
			TrustStatusListType listType = this.trustServiceList.getTrustStatusList();
			listType.setId(this.textField_ID.getText());

			String countryCode = (String) this.language_OperatorName.getSelectedItem();
			Locale defaultLocale = ComboBoxesUtil.getLocaleFromLanguageCode(countryCode);
			this.trustServiceList.setSchemeOperatorName(this.textField_OperatorName.getText(), defaultLocale);

			BigInteger num = BigInteger.ZERO;
			try {
				num = new BigInteger(this.textField_SequenceNumber.getText());
			} catch (Exception numE) {
				LOGGER.error("Exception: " + numE.getMessage());
			}
			this.trustServiceList.getTrustStatusList().getSchemeInformation().setTSLSequenceNumber(num);

			countryCode = (String) this.language_SchemeName.getSelectedItem();
			defaultLocale = ComboBoxesUtil.getLocaleFromLanguageCode(countryCode);
			this.trustServiceList.setSchemeName(this.textField_SchemeName.getText(), defaultLocale);

			countryCode = (String) this.language_OperatorAddress.getSelectedItem();
			defaultLocale = ComboBoxesUtil.getLocaleFromLanguageCode(countryCode);
			PostalAddressType address = this.trustServiceList.getSchemeOperatorPostalAddress(defaultLocale);
			if (address != null) {
				address.setCountryName(this.textField_countryName.getText());
				address.setLocality(this.textField_locality.getText());
				address.setPostalCode(this.textField_postCode.getText());
				address.setStreetAddress(this.textField_streetAddress.getText());
			} else if (ValidatorUtil.isNotNull(this.textField_countryName)
					|| ValidatorUtil.isNotNull(this.textField_locality)
					|| ValidatorUtil.isNotNull(this.textField_postCode)
					|| ValidatorUtil.isNotNull(this.textField_streetAddress)) {
				address = new PostalAddressType();
				address.setCountryName(this.textField_countryName.getText());
				address.setLocality(this.textField_locality.getText());
				address.setPostalCode(this.textField_postCode.getText());
				address.setStreetAddress(this.textField_streetAddress.getText());
				this.trustServiceList.setSchemeOperatorPostalAddress(address, defaultLocale);
			}

			List<String> addresses = new ArrayList<String>();
			if (ValidatorUtil.isNotNull(this.textField_electronicAddress1))
				addresses.add(this.textField_electronicAddress1.getText());
			if (ValidatorUtil.isNotNull(this.textField_electronicAddress2))
				addresses.add(this.textField_electronicAddress2.getText());
			if (ValidatorUtil.isNotNull(this.textField_electronicAddress3))
				addresses.add(this.textField_electronicAddress3.getText());
			this.trustServiceList.setSchemeOperatorElectronicAddresses(addresses);

			if (this.comboBox_territory.getSelectedItem() != null)
				this.trustServiceList.setSchemeTerritory(this.comboBox_territory.getSelectedItem().toString());

			if (ValidatorUtil.isNotNull(this.textField_listIssueDateTime)) {
				Date date = null;
				try {
					date = dateTimeFormatter.parse(this.textField_listIssueDateTime.getText());
				} catch (Exception e) {
					date = new Date();
				}
				DateTime dateTime = new DateTime(date);
				this.trustServiceList.setListIssueDateTime(dateTime);
			}

			if (ValidatorUtil.isNotNull(this.textField_nextUpdate)) {
				Date date = null;
				try {
					date = dateTimeFormatter.parse(this.textField_nextUpdate.getText());
				} catch (Exception e) {
					date = new Date();
				}
				DateTime dateTime = new DateTime(date);
				this.trustServiceList.setNextUpdate(dateTime);
			}

			if (ValidatorUtil.isNotNull(this.textField_DistributionPoint)) {
				if (listType.getSchemeInformation().getDistributionPoints() == null
						|| listType.getSchemeInformation().getDistributionPoints().getURI() == null
						|| listType.getSchemeInformation().getDistributionPoints().getURI().size() == 0) {
					ElectronicAddressType addr = new ElectronicAddressType();
					addr.getURI().add(this.textField_DistributionPoint.getText());
					listType.getSchemeInformation().setDistributionPoints(addr);
				} else {
					listType.getSchemeInformation().getDistributionPoints().getURI().set(0,
							this.textField_DistributionPoint.getText());
				}
			}
		}
	}

	@Action
	/**
	 * This is called when the user clicks "cancel" in the Digital Id
	 * certificate dialog
	 */
	public void cancelDigitalIdDialog() {
		this.digitalIdDialog.setVisible(false);
	}

	@Action
	/**
	 * This is called when the user clicks "view" in the list of digital id
	 * certificates of a given service. If one of the certificates in the list
	 * is currently selected, its information is displayed to the user in a new
	 * dialog window
	 */
	public void viewCertificate() {
		if (this.certificateList.getSelectedValue() == null)
			JOptionPane.showMessageDialog(this.jSplitPane1,
					"You must first select the certificate you want to view from the list", "Certificate Selection",
					JOptionPane.ERROR_MESSAGE);
		else {
			String crtSubject = (String) this.certificateList.getSelectedValue();

			if (this.currentTreeNode != null && this.currentTreeNode.getUserObject() instanceof TrustService) {
				TrustService service = (TrustService) this.currentTreeNode.getUserObject();
				List<DigitalIdentityType> ids = service.getTSPService().getServiceInformation()
						.getServiceDigitalIdentity().getDigitalId();
				if (ids != null) {
					try {
						for (DigitalIdentityType id : ids) {
							if (id.getX509Certificate() != null) {
								X509Certificate certificate = (X509Certificate) certificateFactory
										.generateCertificate(new ByteArrayInputStream(id.getX509Certificate()));
								if (certificate != null) {
									String cSubj = ValidatorUtil.getUniqueSubjectLine(certificate);
									if (cSubj.equals(crtSubject)) {
										// found certificate to show
										this.certificateIssuerName
												.setText(certificate.getIssuerX500Principal().getName());
										this.certificateSerialNumber.setText("" + certificate.getSerialNumber());
										this.certificateValidFrom.setText("" + certificate.getNotBefore());
										this.certificateValidUntil.setText("" + certificate.getNotAfter());
										this.certificateSubjectName
												.setText(certificate.getSubjectX500Principal().getName());

										this.digitalIdDialog.setVisible(true);
										break;
									}
								}
							}
						}
					} catch (Exception e) {
						LOGGER.error("Exception: " + e.getMessage());
					}
				}
			}
		}
	}

	@Action
	/**
	 * This is called when the user clicks "delete" in the list of digital id
	 * certificates of a given service. If one of the certificates in the list
	 * is currently selected, a confirmation window asks the user for a second
	 * confirmation and then proceeds to delete this X509 certificate from the
	 * currently selected TrustService object
	 */
	public void deleteCertificate() {
		if (this.certificateList.getSelectedValue() == null)
			JOptionPane.showMessageDialog(this.jSplitPane1,
					"You must first select the certificate you want to delete from the list", "Certificate Selection",
					JOptionPane.ERROR_MESSAGE);
		else {
			if (JOptionPane.showConfirmDialog(this.jSplitPane1,
					"Are you sure you want to delete this Certificate? ") == 0) {
				String crtSubject = (String) this.certificateList.getSelectedValue();
				if (this.currentTreeNode != null && this.currentTreeNode.getUserObject() instanceof TrustService) {
					TrustService service = (TrustService) this.currentTreeNode.getUserObject();
					List<DigitalIdentityType> ids = service.getTSPService().getServiceInformation()
							.getServiceDigitalIdentity().getDigitalId();
					if (ids != null) {
						try {
							for (DigitalIdentityType id : ids) {
								if (id.getX509Certificate() != null) {
									X509Certificate certificate = (X509Certificate) certificateFactory
											.generateCertificate(new ByteArrayInputStream(id.getX509Certificate()));
									if (certificate != null) {
										String cSubj = ValidatorUtil.getUniqueSubjectLine(certificate);
										if (cSubj.equals(crtSubject)) {
											// found certificate to delete
											ids.remove(id);
											// remove also from list model
											((DefaultListModel) this.certificateList.getModel())
													.removeElement(crtSubject);
											break;
										}
									}
								}
							}
						} catch (Exception e) {
							LOGGER.error("Exception: " + e.getMessage());
						}
					}
				}
			}
		}
	}

	@Action
	/**
	 * This is called when the user clicks on "add" in the list of digital id
	 * certificates of a given service. A file chooser dialog is shown, to allow
	 * the user to choose the certificate file.
	 */
	public void addCertificate() {
		this.certificateFileDialog.setVisible(true);
	}

	@Action
	/**
	 * This is called when the user clicks on "sign" in the signature node frame
	 * of the TSL. A file chooser dialog is shown, to allow the user to choose
	 * the signature keystore file.
	 */
	public void signTSL() {
		this.signatureFileDialog.setVisible(true);
	}

	@Action
	/**
	 * This is called when the user chooses "Upload" from the menubar options.
	 * The file is saved first (hence validation is also run, and if successful,
	 * the file is written to the upload URL set in the tsleditor.properties
	 * file
	 */
	public void uploadTSL() {
		if (saveTSL()) {
			this.ftpServerField.setText("sample.ftpserver.com");
			this.ftpUserName.setText("");
			// this.ftpUploadPathField.setText("/tsl.xml");
			this.ftpDialog.setVisible(true);
		}
	}

	@Action
	/**
	 * This is called when the user chooses "Upload" from the menubar options.
	 * The file is saved first (hence validation is also run, and if successful,
	 * the file is written to the upload URL set in the tsleditor.properties
	 * file
	 */
	public void UploadTSLSftp() {
		if (saveTSL()) {
			// this.ftpPasswordField.setText("");
			this.ftpPrivateKey.setText("U:\\tmp\\mb\\cro_PrivateKey_openssh.ppk");
			this.ftpServerField.setText("fts.ec.europa.eu");
			this.ftpUserName.setText("cro");
			// this.ftpUploadPathField.setText("/");
			// langCode =
			// this.language_OperatorAddress.getSelectedItem().toString();
			this.ftpDialog.setVisible(true);
		}
	}

	@Action
	public void ftpUploadTSL() {
		String host = this.ftpServerField.getText();
		String username = this.ftpUserName.getText();
		// String destFolder = this.ftpUploadPathField.getText();
		String destFolder = this.ftpUploadPathField.getSelectedItem().toString();

		String KEY_FILE_NAME = this.ftpPrivateKey.getText();
		String filePath = this.tslFile.getAbsolutePath();
		Session session = null;
		Channel channel = null;
		try {
			JSch ssh = new JSch();
			ssh.setKnownHosts(host);
			ssh.addIdentity(KEY_FILE_NAME);
			JSch.setConfig("StrictHostKeyChecking", "no");
			session = ssh.getSession(username, host, 22);
			session.connect();
			channel = session.openChannel("sftp");
			channel.connect();
			ChannelSftp sftp = (ChannelSftp) channel;
			sftp.put(filePath, destFolder, ChannelSftp.OVERWRITE);
			System.out.println(filePath + " got uploaded successfully to folder " + destFolder);
			JOptionPane.showMessageDialog(this.jSplitPane1, "Upload to site \'" + destFolder + "\' was successful!",
					"Upload Success!", JOptionPane.INFORMATION_MESSAGE);
			ftpDialog.setVisible(false);
		} catch (JSchException e) {
			JOptionPane.showMessageDialog(null, "Exception on tranferring the file " + e.getMessage());
			System.out.println("Exception on tranferring the file " + e.getMessage());
		} catch (SftpException e) {
			JOptionPane.showMessageDialog(null, "SFTP Exception on tranferring the file " + e.getMessage());
			System.out.println("SFTP Exception on tranferring the file " + e.getMessage());
		} finally {
			if (channel != null)
				channel.disconnect();
			if (session != null)
				session.disconnect();
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel TSLEnvelopePanel;
	private javax.swing.JPanel TSLProviderPanel;
	private javax.swing.JPanel TSLServicePanel;
	private javax.swing.JPanel TSLSignaturePanel;
	private javax.swing.JButton addCertificateButton;
	private javax.swing.JFileChooser certificateFileChooser;
	private javax.swing.JDialog certificateFileDialog;
	private javax.swing.JTextField certificateIssuerName;
	private javax.swing.JList certificateList;
	private javax.swing.JTextField certificateSerialNumber;
	private javax.swing.JTextField certificateSubjectName;
	private javax.swing.JTextField certificateValidFrom;
	private javax.swing.JTextField certificateValidUntil;
	private javax.swing.JComboBox comboBox_territory;
	private javax.swing.JComboBox combo_ServiceTypeIdentifier;
	private javax.swing.JComboBox combo_Service_Status;
	private javax.swing.JButton deleteCertificateButton;
	private javax.swing.JDialog digitalIdDialog;
	private javax.swing.JDialog fileChooser;
	private javax.swing.JDialog ftpDialog;
	private javax.swing.JTextField ftpPrivateKey;
	private javax.swing.JTextField ftpServerField;
	// private javax.swing.JTextField ftpUploadPathField;
	private javax.swing.JComboBox ftpUploadPathField;
	private javax.swing.JTextField ftpUserName;
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JFileChooser jFileChooser1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel10;
	private javax.swing.JLabel jLabel11;
	private javax.swing.JLabel jLabel12;
	private javax.swing.JLabel jLabel13;
	private javax.swing.JLabel jLabel14;
	private javax.swing.JLabel jLabel15;
	private javax.swing.JLabel jLabel16;
	private javax.swing.JLabel jLabel17;
	private javax.swing.JLabel jLabel18;
	private javax.swing.JLabel jLabel19;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel20;
	private javax.swing.JLabel jLabel21;
	private javax.swing.JLabel jLabel22;
	private javax.swing.JLabel jLabel23;
	private javax.swing.JLabel jLabel24;
	private javax.swing.JLabel jLabel25;
	private javax.swing.JLabel jLabel26;
	private javax.swing.JLabel jLabel27;
	private javax.swing.JLabel jLabel28;
	private javax.swing.JLabel jLabel29;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel30;
	private javax.swing.JLabel jLabel31;
	private javax.swing.JLabel jLabel32;
	private javax.swing.JLabel jLabel33;
	private javax.swing.JLabel jLabel34;
	private javax.swing.JLabel jLabel35;
	private javax.swing.JLabel jLabel36;
	private javax.swing.JLabel jLabel37;
	private javax.swing.JLabel jLabel38;
	private javax.swing.JLabel jLabel39;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel40;
	private javax.swing.JLabel jLabel41;
	private javax.swing.JLabel jLabel42;
	private javax.swing.JLabel jLabel43;
	private javax.swing.JLabel jLabel44;
	private javax.swing.JLabel jLabel45;
	private javax.swing.JLabel jLabel46;
	private javax.swing.JLabel jLabel47;
	private javax.swing.JLabel jLabel48;
	private javax.swing.JLabel jLabel49;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel50;
	private javax.swing.JLabel jLabel51;
	private javax.swing.JLabel jLabel52;
	private javax.swing.JLabel jLabel53;
	private javax.swing.JLabel jLabel54;
	private javax.swing.JLabel jLabel55;
	private javax.swing.JLabel jLabel56;
	private javax.swing.JLabel jLabel57;
	private javax.swing.JLabel jLabel58;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JLabel jLabel8;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JMenuItem jMenuItem1;
	private javax.swing.JMenuItem jMenuItem2;
	private javax.swing.JMenuItem jMenuItem3;
	private javax.swing.JMenuItem jMenuItem4;
	private javax.swing.JMenuItem jMenuItem5;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JPopupMenu.Separator jSeparator1;
	private javax.swing.JPopupMenu.Separator jSeparator2;
	private javax.swing.JSeparator jSeparator3;
	private javax.swing.JSeparator jSeparator4;
	private javax.swing.JSeparator jSeparator5;
	private javax.swing.JSeparator jSeparator6;
	private javax.swing.JSplitPane jSplitPane1;
	private javax.swing.JTree jTree;
	private javax.swing.JPasswordField keyAlias;
	private javax.swing.JPasswordField keyPassword;
	private javax.swing.JPasswordField keyStorePassword;
	private javax.swing.JComboBox language_OperatorAddress;
	private javax.swing.JComboBox language_OperatorName;
	private javax.swing.JComboBox language_Provider_Address;
	private javax.swing.JComboBox language_Provider_Information;
	private javax.swing.JComboBox language_Provider_Name;
	private javax.swing.JComboBox language_SchemeName;
	private javax.swing.JComboBox language_Service_Name;
	private javax.swing.JPanel mainPanel;
	private javax.swing.JMenuBar menuBar;
	private javax.swing.JProgressBar progressBar;
	private javax.swing.JScrollPane rightScrollPane;
	private javax.swing.JButton signButton;
	private javax.swing.JFileChooser signatureFileChooser;
	private javax.swing.JDialog signatureFileDialog;
	private javax.swing.JTextField signatureIssuerName;
	private javax.swing.JTextField signatureSerialNumber;
	private javax.swing.JTextField signatureSubjectName;
	private javax.swing.JTextField signatureValidFrom;
	private javax.swing.JTextField signatureValidUntil;
	private javax.swing.JLabel statusAnimationLabel;
	private javax.swing.JLabel statusMessageLabel;
	private javax.swing.JPanel statusPanel;
	private javax.swing.JTextField textField_DistributionPoint;
	private javax.swing.JTextField textField_ID;
	private javax.swing.JTextField textField_OperatorName;
	private javax.swing.JTextField textField_Provider_CountryName;
	private javax.swing.JTextField textField_Provider_ElectronicAddress1;
	private javax.swing.JTextField textField_Provider_ElectronicAddress2;
	private javax.swing.JTextField textField_Provider_ElectronicAddress3;
	private javax.swing.JTextField textField_Provider_Information;
	private javax.swing.JTextField textField_Provider_Locality;
	private javax.swing.JTextField textField_Provider_PostCode;
	private javax.swing.JTextField textField_Provider_StreetAddress;
	private javax.swing.JTextField textField_SchemeName;
	private javax.swing.JTextField textField_SequenceNumber;
	private javax.swing.JTextField textField_Service_Name;
	private javax.swing.JFormattedTextField textField_Service_StartingTime;
	private javax.swing.JTextField textField_Service_SupplyPoint1;
	private javax.swing.JTextField textField_Service_SupplyPoint2;
	private javax.swing.JTextField textField_Service_SupplyPoint3;
	private javax.swing.JTextField textField_Signature_CanonicalizationMethod;
	private javax.swing.JTextField textField_Signature_SignatureMethod;
	private javax.swing.JTextField textField_countryName;
	private javax.swing.JTextField textField_electronicAddress1;
	private javax.swing.JTextField textField_electronicAddress2;
	private javax.swing.JTextField textField_electronicAddress3;
	private javax.swing.JFormattedTextField textField_listIssueDateTime;
	private javax.swing.JTextField textField_locality;
	private javax.swing.JFormattedTextField textField_nextUpdate;
	private javax.swing.JTextField textField_postCode;
	private javax.swing.JTextField textField_providerName;
	private javax.swing.JTextField textField_streetAddress;
	private javax.swing.JPopupMenu treePopupMenu;
	private javax.swing.JScrollPane treeScrollPane;
	private javax.swing.JButton viewCertificateButton;
	// End of variables declaration//GEN-END:variables

	private final Timer messageTimer;
	private final Timer busyIconTimer;
	private final Icon idleIcon;
	private final Icon[] busyIcons = new Icon[15];
	private int busyIconIndex = 0;

	private JDialog aboutBox;

	private TrustServiceList trustServiceList;
	private File tslFile;

	private java.text.SimpleDateFormat dateTimeFormatter = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
	private java.text.SimpleDateFormat fileVersionFormatter = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss");

	private DefaultMutableTreeNode currentTreeNode;

	private TreePath currentPopupSelectedTreePath;

	private ObjectFactory objectFactory = new ObjectFactory();

	private CertificateFactory certificateFactory;
	private JMenuItem smpMenuItem;

}
